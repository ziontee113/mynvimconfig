local results = {
  has_more = true,
  items = { {
      accepted_answer_id = 55711279,
      answer_count = 1,
      body = "<p>So... If I input:</p>\n\n<p>4 1 5 3</p>\n\n<p>INSTEAD OF 1,3,4,5</p>\n\n<p>I GET      [ 4, 1, 5, 3 ]</p>\n\n<p>Following is the code for merge sort but for the last comparison the program doesn't fetch updated (1,4) (3,5) value rather (4,1) (5,3) thus giving the wrong result.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code> var a = [4, 1, 5, 3];\r\n    q(a);\r\n    function q(a) {\r\n      var start = 0;\r\n      var n = a.length;\r\n      var length = parseInt(n / 2);\r\n      if (n &lt; 2) {\r\n        return n;\r\n      }\r\n      var l = [], r = [];\r\n      for (i = 0; i &lt; length; i++) {\r\n        l[i] = a[i];  //left array\r\n      }\r\n      for (i = 0, j = length; j &lt; n; i++ , j++) {\r\n        r[i] = a[j];   //right array\r\n      }\r\n      q(l);           //merge sort left array\r\n      q(r);           //merge sort right array\r\n      comp(l, r);\r\n    }\r\n    \r\n    function comp(l, r) {\r\n      var k = [], m = 0, i = 0, j = 0;\r\n      while (i &lt; ((l.length)) &amp;&amp; j &lt; ((r.length))) {\r\n        if (l[i] &lt; r[j]) {\r\n          k[m] = l[i];\r\n          i++;\r\n          m++\r\n        }\r\n        else {\r\n          k[m] = r[j];\r\n          j++;\r\n          m++\r\n        }\r\n      }\r\n      while (i != (l.length)) {\r\n        k[m] = l[i];\r\n        m++;\r\n        i++;\r\n      }\r\n      while (j != (r.length)) {\r\n        k[m] = r[j];\r\n        m++;\r\n        j++;\r\n      }\r\n      console.log(k); //for final output it is [ 4, 1, 5, 3 ] instead of [1,3,4,5]\r\n\r\n    }</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
      content_license = "CC BY-SA 4.0",
      creation_date = 1555424813,
      is_answered = true,
      last_activity_date = 1555429663,
      last_edit_date = 1555425843,
      link = "https://stackoverflow.com/questions/55710541/correct-merge-sort",
      owner = {
        accept_rate = 87,
        account_id = 6902372,
        display_name = "art",
        link = "https://stackoverflow.com/users/5400992/art",
        profile_image = "https://www.gravatar.com/avatar/f8c4a34e8972e7702d9c94a483b04a15?s=256&d=identicon&r=PG&f=1",
        reputation = 219,
        user_id = 5400992,
        user_type = "registered"
      },
      question_id = 55710541,
      score = 2,
      tags = { "javascript" },
      title = "Correct merge sort",
      view_count = 76
    }, {
      accepted_answer_id = 29639172,
      answer_count = 4,
      body = "<p>I got two implementation of the algorithms: one is shell sort, the other is merge sort. \nShell sort complexity is something near n^1.5 and merge sort is n * logn, so basically merge sort should be quicker. However, on my test I see different results: shell sort much quicker then merge sort. I believe I am doing something wrong, however not seeing this.</p>\n\n<p>Shell Sort implementaion:</p>\n\n<pre><code>var shell_sort = function(array){\n    var length = array.length;\n    var h = 1;\n    while( h &lt; length / 3){\n        h = 3 * h + 1;\n    }\n\n    while( h &gt; 0 ){\n        for ( var i = h; i &lt; length; i++){\n\n            for ( var j = i; j &gt; 0 &amp;&amp; array[j] &lt; array[j-h]; j-=h){\n                array.swap(j, j-h);\n            }\n        }\n        //decreasing h\n        h = --h / 3\n\n    }\n    return array;\n};\n</code></pre>\n\n<p>And Merge Sort:</p>\n\n<pre><code>var merge_sort = function(array){      \n    function merge(left, right){\n        var result = [];\n        var il = 0;\n        var ir = 0;\n\n        while (il &lt; left.length &amp;&amp; ir &lt; right.length){\n          if (left[il] &lt; right[ir]){\n            result.push(left[il++]);\n          } else {\n            result.push(right[ir++]);\n          }\n        }\n\n        if ( il &lt; left.length){\n            result.push.apply(result,left.slice(il));\n        } \n\n        if (ir &lt; right.length){\n            result.push.apply(result,right.slice(ir));\n        }\n\n        return result;\n    }\n\n    function merge_sort(items){\n        //well it is only 1 element\n        if (items.length &lt; 2){\n            return items;\n        }\n\n        var middle = Math.floor(items.length / 2);\n\n        //create two arrays\n        var left = items.slice(0, middle);\n        var right = items.slice(middle);\n\n        return merge(merge_sort(left), merge_sort(right));\n    }\n\n    return merge_sort(array);\n\n};\n</code></pre>\n\n<p>Basically results on arrays of 10 million elements is next:</p>\n\n<p>Shell sort : 12725ms </p>\n\n<p>Merge Sort: 34338ms</p>\n\n<p>Test is very simple:</p>\n\n<pre><code>//sorting 100000 elements\narray.generate_numbers(10000000);\nconsole.time('10000000elements');\nsort_algs(array);\nconsole.timeEnd('10000000elements');\n</code></pre>\n\n<p>Where generate_numbers is simple helper function which generates array of numbers with configured size, as well as swap is a function which changes element positions.</p>\n",
      content_license = "CC BY-SA 3.0",
      creation_date = 1428441363,
      is_answered = true,
      last_activity_date = 1470082983,
      link = "https://stackoverflow.com/questions/29501448/javascript-shell-sort-implementation-is-quicker-then-merge-sort",
      owner = {
        accept_rate = 33,
        account_id = 421839,
        display_name = "dimko1",
        link = "https://stackoverflow.com/users/800278/dimko1",
        profile_image = "https://www.gravatar.com/avatar/512793527d37061b3191bc4215ad3f2a?s=256&d=identicon&r=PG",
        reputation = 852,
        user_id = 800278,
        user_type = "registered"
      },
      question_id = 29501448,
      score = 4,
      tags = { "javascript", "arrays", "algorithm" },
      title = "Javascript Shell Sort implementation is quicker then Merge Sort",
      view_count = 1719
    }, {
      answer_count = 0,
      body = "<p>My merge sort visualizer draws the array but does not show them being sorted and doesnt seem to be correctly merging them and displaying each step. instead of returning a sorted array, I see a quick flash of the array then a blank screen. </p>\n\n<p>values is the array and states is supposed to change in value from -1 to 1 based on whether an index is currently in progress, waiting, or completed but I'm trying to get the sort and merge working first.</p>\n\n<pre><code>//array of values to be sorted\nlet values = [];\n//width of values\nlet w = 2;\n//hold the state of the array\nlet states = [];\n\nfunction setup() {\n    createCanvas(windowWidth, windowHeight);\n    values = new Array(floor(random(250, width / w)));\n    for (i = 0; i &lt; values.length; i++) {\n        values[i] = random(height);\n        states[i] = -1;\n    }\n\n}\n\nasync function mergeSort(arr) {\n    if (arr.length &lt;= 1) {\n        return arr;\n    }\n\n    //get midpoint\n    let mid = Math.round(arr.length / 2);\n    states[mid] = -1;\n    //split the array\n    temp1 = arr.slice(0, mid);\n    temp2 = arr.slice(mid, arr.length);\n    //merge the array\n    await Promise.all([\n        merge(mergeSort(temp1), mergeSort(temp2))\n    ]);\n\n}\n\nasync function merge(arr1, arr2) {\n    await sleep(25);\n    let sorted = [];\n    while (arr1.length &gt; 0 &amp;&amp; arr2.length &gt; 0) {\n        (arr1[0] &lt; arr2[0]) ? sorted.push(arr1.shift()): \nsorted.push(arr2.shift());\n    }\n    while (arr1.length &gt; 0) {\n        sorted.push(arr1.shift());\n    }\n    while (arr2.length &gt; 0) {\n        sorted.push(arr2.shift());\n    }\n    values = sorted.slice();\n}\n\nfunction draw() {\n    background(0);\n    mergeSort(values);\n    for (let i = 0; i &lt; values.length; i++) {\n        noStroke();\n        if (states[i] == 0) {\n            fill('#38e332');\n        } else if (states[i] == 1) {\n            fill('#c9c8c7');\n        } else {\n            fill(255);\n        }\n        //draw the array values at location x=i*w , y=height-array[i] with given width (w) and height(array[i])\n        rect(i * w, height - values[i], w, values[i]);\n    }\n\n}\n\n\nasync function sleep(ms) {\n    return new Promise(resolve =&gt; setTimeout(resolve, ms));\n}\n'\n</code></pre>\n",
      content_license = "CC BY-SA 4.0",
      creation_date = 1590519053,
      is_answered = false,
      last_activity_date = 1590521860,
      last_edit_date = 1590521860,
      link = "https://stackoverflow.com/questions/62029282/merge-sort-visualizer",
      owner = {
        account_id = 18682809,
        display_name = "nathaniel taylor",
        link = "https://stackoverflow.com/users/13618989/nathaniel-taylor",
        profile_image = "https://lh6.googleusercontent.com/-NPO7xjY38EY/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuclwcypDmMnxlgRP-sBA_UBzt-R_ag/photo.jpg?sz=256",
        reputation = 11,
        user_id = 13618989,
        user_type = "registered"
      },
      question_id = 62029282,
      score = 1,
      tags = { "javascript", "arrays", "sorting", "mergesort", "p5.js" },
      title = "Merge Sort Visualizer",
      view_count = 167
    }, {
      answer_count = 2,
      body = '<p>I was trying to implement merge sort algorithm in JavaScript without built in methods like slice(), splice(), etc. It doesnâ€™t work exactly I wish. Can you help me to figure out where is bug hidden? Getting output [3, 5, 5, 3, 7] instead of [3, 5, 5, 7, 8].</p>\n<p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">\r\n<div class="snippet-code">\r\n<pre class="snippet-code-js lang-js prettyprint-override"><code>// Merge Sort implementation\n\n// sort implementation\nfunction sort(arr, start, mid, end) {\n\n  // Creation and filling the temp arrays\n  let lArray = [];\n  let rArray = [];\n\n  for (let i = 0; i &lt;= mid - start; i++) {\n    lArray[i] = arr[start + i];\n  }\n\n  for (let j = 0; j &lt;= end - mid - 1; j++) {\n    rArray[j] = arr[mid + 1 + j];\n  }\n\n\n  // Sorting and updating current array\n  let i = 0;\n  let j = 0;\n  let k = start;\n\n  while (i &lt; lArray.length &amp;&amp; j &lt; rArray.length) {\n    if (lArray[i] &lt; rArray[j]) {\n      arr[k] = lArray[i];\n      i++;\n      k++;\n    } else {\n      arr[k] = rArray[j];\n      j++;\n      k++;\n    }\n  }\n\n  // Handling last element in lArray or rArray\n\n  i &lt; lArray.length ? arr[k] = lArray[i] : arr[k] = rArray[j];\n}\n\n// Recursive Merge Sort \nfunction recursiveMergeSort(arr, start, end) {\n  if (start &lt; end) {\n    let mid = Math.floor(((end) + start) / 2);\n    //console.log(start, end, mid);\n    recursiveMergeSort(arr, start, mid);\n    recursiveMergeSort(arr, mid + 1, end);\n    sort(arr, start, mid, end);\n  }\n}\n\nfunction mergeSort(arr) {\n\n  let start = 0;\n  let end = arr.length - 1;\n\n  recursiveMergeSort(arr, start, end);\n  return (arr)\n}\n\nconsole.log(mergeSort([5, 8, 3, 7, 5]));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n',
      content_license = "CC BY-SA 4.0",
      creation_date = 1635446812,
      is_answered = false,
      last_activity_date = 1635541049,
      last_edit_date = 1635446949,
      link = "https://stackoverflow.com/questions/69759390/merge-sort-implementation-javascript",
      owner = {
        account_id = 23174705,
        display_name = "Andrei",
        link = "https://stackoverflow.com/users/17273401/andrei",
        profile_image = "https://www.gravatar.com/avatar/11e6b666bb68ef3774bcd18e71f0ec22?s=256&d=identicon&r=PG",
        reputation = 11,
        user_id = 17273401,
        user_type = "registered"
      },
      question_id = 69759390,
      score = 1,
      tags = { "javascript", "algorithm", "sorting", "recursion", "mergesort" },
      title = "Merge sort implementation JavaScript",
      view_count = 147
    }, {
      accepted_answer_id = 34845789,
      answer_count = 1,
      body = "<p><a href=\"http://jsperf.com/optimized-mergesort-versus-quicksort\" rel=\"nofollow noreferrer\">http://jsperf.com/optimized-mergesort-versus-quicksort</a></p>\n<p>Why does this half buffer merge sort work as fast as quicksort?</p>\n<p>QuickSort is:</p>\n<ol>\n<li>In-Place although it takes up <code>log(n)</code> recursions (stack space)</li>\n<li>Cache-Friendly</li>\n</ol>\n<p>This half buffer merge sort:</p>\n<ol>\n<li>Uses an <code>n/2</code> Buffer to do merges.</li>\n<li>Uses <code>log(n)</code> recursions.</li>\n<li>Makes fewer comparisons.</li>\n</ol>\n<p>My question is, why is the half buffer merge sort matching the speed of QuickSort in this scenario?\nPlus, is there anything I'm doing wrong to the quickSort that makes it slower?</p>\n<pre><code>function partition(a, i, j) {\n    var p = i + Math.floor((j - i) / 2);\n    var left = i + 1;\n    var right = j;\n    swap(a, i, p);\n    var pivot = a[i];\n    while (left &lt;= right) {\n        while (builtinLessThan(a[left], pivot)) {\n            ++left;\n        }\n        while (builtinLessThan(pivot, a[right])) {\n            --right;\n        }\n        if (left &lt;= right) {\n            swap(a, left, right);\n            ++left;\n            --right;\n        }\n    }\n    swap(a, i, right);\n    return right;\n};\n\nfunction quickSort(a, i, j) {\n    var p = partition(a, i, j);\n    if ((p) - i &gt; j - p) {\n        if (i &lt; p - 1) {\n            quickSort(a, i, p - 1);\n        }\n        if (p + 1 &lt; j) {\n            quickSort(a, p + 1, j);\n        }\n    } else {\n        if (p + 1 &lt; j) {\n            quickSort(a, p + 1, j);\n        } if (i &lt; p - 1) {\n            quickSort(a, i, p - 1);\n        }\n    }\n};\n</code></pre>\n",
      content_license = "CC BY-SA 4.0",
      creation_date = 1453070286,
      is_answered = true,
      last_activity_date = 1600450748,
      last_edit_date = 1600450748,
      link = "https://stackoverflow.com/questions/34844613/optimized-merge-sort-faster-than-quicksort",
      owner = {
        accept_rate = 75,
        account_id = 5413876,
        display_name = "ahitt6345",
        link = "https://stackoverflow.com/users/4309643/ahitt6345",
        profile_image = "https://lh3.googleusercontent.com/-2d8xK9LzNOg/AAAAAAAAAAI/AAAAAAAAAJs/QmNLGOhKeBY/photo.jpg?sz=256",
        reputation = 470,
        user_id = 4309643,
        user_type = "registered"
      },
      question_id = 34844613,
      score = 2,
      tags = { "javascript", "node.js", "algorithm", "sorting", "performance-testing" },
      title = "Optimized merge sort faster than quicksort",
      view_count = 1373
    }, {
      answer_count = 1,
      body = '<p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">\r\n<div class="snippet-code">\r\n<pre class="snippet-code-js lang-js prettyprint-override"><code>// variables\n// arr has elements to be sorted\nvar arr = []\n// temp is to store the intermediate results after merging\nvar temp = []\n// seen is for marking visited i.e. sorted half as green\nvar seen = []\n// length of array\nvar len = 100\n\n// canvas initialisations\nvar canvas = document.getElementById("myCanvas")\ncanvas.width = canvas.height = 1000\nvar canvaswidth = canvas.width\nvar canvasheight = canvas.height\nvar ctx = canvas.getContext("2d")\n\n// random array\nfor (let i = 0; i &lt; len; i++) {\n    arr.push(parseInt(Math.random() * 500))\n    temp.push(parseInt(0))\n    seen.push(parseInt(0))\n}\n\n// initial contents of array to be sorted\n// console.log(arr)\n\n// draw the bars\ndraw = (s, e) =&gt; {\n    ctx.clearRect(0, 0, 1000, 1000)\n\n    // this loop will make unvisited bars in the upper half as black\n    // and visited bars in the upper half as green\n    for (let i = 0; i &lt; len; i++) {\n        ctx.fillStyle = "#000000"\n        ctx.fillRect(15 * i, 500 - arr[i], 10, arr[i])\n        if (seen[i]) {\n            ctx.fillStyle = "#00ff00"\n            ctx.fillRect(15 * i, 500 - arr[i], 10, arr[i])\n        }\n    }\n\n    // the part that was merged is made blue in the lower half\n    // also its equivalent in the uper half is made white\n    for (let i = s; i &lt;= e; i++) {\n        ctx.fillStyle = "#ffffff"\n        ctx.fillRect(15 * i, 500 - arr[i], 10, arr[i])\n        ctx.fillStyle = "#0000ff"\n        ctx.fillRect(15 * i, 500, 10, arr[i])\n        seen[i] = 1\n    }\n\n}\n\n// merge\nmerge = (s, e) =&gt; {\n\n    let m = parseInt((s + e) / 2)\n    let p1 = s\n    let p2 = m + 1\n    let n1 = m\n    let n2 = e\n    let idx = s\n\n    while (p1 &lt;= n1 &amp;&amp; p2 &lt;= n2) {\n        if (arr[p1] &lt;= arr[p2]) {\n            temp[idx++] = arr[p1++]\n        }\n        else {\n            temp[idx++] = arr[p2++]\n        }\n    }\n\n    while (p1 &lt;= n1) {\n        temp[idx++] = arr[p1++]\n    }\n\n    while (p2 &lt;= n2) {\n        temp[idx++] = arr[p2++]\n    }\n\n    idx = s\n    while (idx &lt;= e) {\n        arr[idx] = temp[idx++]\n    }\n\n}\n\n// delay\nfunction mytimeout(ms) {\n    return new Promise(resolve =&gt; setTimeout(resolve, ms));\n}\n\n// mergesort\nconst mergesort = async (s, e) =&gt; {\n\n    if (s &lt; e) {\n        let m = parseInt((s + e) / 2)\n        await mergesort(s, m)\n        await mergesort(m + 1, e)\n        await merge(s, e)\n        // await console.log(`merged ${s} to ${e} now draw...`)\n        await draw(s, e)\n        await mytimeout(500)\n    }\n\n}\n\n// calls merge sort and at last \n// makes all bars become green in upper half\nconst performer = async () =&gt; {\n    await mergesort(0, len - 1)\n    // await console.log(arr)\n    await draw()\n}\n\n\n\nperformer()</code></pre>\r\n<pre class="snippet-code-html lang-html prettyprint-override"><code>&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n\n&lt;head&gt;\n    &lt;meta charset="UTF-8"&gt;\n    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;canvas id="myCanvas"&gt;\n        Your browser does not support the canvas element.\n    &lt;/canvas&gt;\n    &lt;script src="testmerge.js"&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>I am trying to make a visualisation of <strong>merge sort</strong> using plain javascript with HTML canvas.</p>\n<p>If i change the len variable to 50 or below my code works</p>\n<p>currently i have kept the len variable at 100</p>\n<p>the entire array after getting sorted, in the final picture, the bars in the histogram decrease in height automatically</p>\n<p>i am not sure if there is a better/cleaner way to approach this</p>\n',
      content_license = "CC BY-SA 4.0",
      creation_date = 1593002206,
      is_answered = true,
      last_activity_date = 1593016534,
      last_edit_date = 1593016534,
      link = "https://stackoverflow.com/questions/62555192/merge-sort-visualisation",
      owner = {
        account_id = 16452180,
        display_name = "keemahs",
        link = "https://stackoverflow.com/users/11885333/keemahs",
        profile_image = "https://lh5.googleusercontent.com/-7hCT6hwFqYM/AAAAAAAAAAI/AAAAAAAAACk/7UZZSSmBE0E/photo.jpg?sz=256",
        reputation = 530,
        user_id = 11885333,
        user_type = "registered"
      },
      question_id = 62555192,
      score = 0,
      tags = { "javascript", "algorithm", "sorting", "mergesort", "array-algorithms" },
      title = "Merge Sort Visualisation",
      view_count = 252
    }, {
      accepted_answer_id = 43790052,
      answer_count = 2,
      body = "<p>Implemented the merge sort algorithm in my javascript code. </p>\n\n<p>I'm wonder how I can target specific attributes like <code>date</code>, <code>title</code>, <code>name</code> etc for sorting in an array when calling merge sort like <code>mergeSort(array);</code>.</p>\n\n<pre><code>function mergeSort(arr){\n    var len = arr.length;\n    if(len &lt;2)\n        return arr;\n    var mid = Math.floor(len/2),\n        left = arr.slice(0,mid),\n        right =arr.slice(mid);\n\n    return merge(mergeSort(left),mergeSort(right));\n}\n\nfunction merge(left, right){\n    var result = [],\n        lLen = left.length,\n        rLen = right.length,\n        l = 0,\n        r = 0;\n    while(l &lt; lLen &amp;&amp; r &lt; rLen){\n        if(left[l] &lt; right[r]){\n            result.push(left[l++]);\n        }\n        else{\n            result.push(right[r++]);\n        }\n    }  \n\n    return result.concat(left.slice(l)).concat(right.slice(r));\n}\n</code></pre>\n\n<p>Using it in a sort options method. What I want is to print a sorted list. The way the list is sorted will be defined by the users chosen sort option.</p>\n\n<pre><code>function sortConfig(array, sortOption){\n if(sortOption == 'title') mergeSort(array.Title);\n //..etc\n}\n</code></pre>\n",
      content_license = "CC BY-SA 3.0",
      creation_date = 1493915125,
      is_answered = true,
      last_activity_date = 1493921653,
      last_edit_date = 1493918012,
      link = "https://stackoverflow.com/questions/43788244/target-specific-attributes-with-merge-sort",
      owner = {
        accept_rate = 76,
        account_id = 6965142,
        display_name = "Znowman",
        link = "https://stackoverflow.com/users/5343428/znowman",
        profile_image = "https://www.gravatar.com/avatar/c4d1aa5034eac28d3c5a4513f9926dd5?s=256&d=identicon&r=PG&f=1",
        reputation = 365,
        user_id = 5343428,
        user_type = "registered"
      },
      question_id = 43788244,
      score = 1,
      tags = { "javascript", "sorting", "mergesort" },
      title = "Target specific attributes with merge sort",
      view_count = 151
    }, {
      answer_count = 5,
      body = "<p>I am trying to understand how JavaScript merge sort function work. And I struggle understanding how the recursive function work. This is the code:</p>\n<pre><code>const mergeSort = array =&gt; {\n  if (array.length &lt; 2) {\n    //function stop here\n    return array\n  }\n\n  const middle = Math.floor(array.length / 2);\n  const leftSide = array.slice(0, middle);\n  const rightSide = array.slice(middle, array.length);\n  return merge(mergeSort(leftSide), mergeSort(rightSide))\n\n};\n\nconst merge = (left, right) =&gt; {\n  const result = [];\n\n  while (left.length &amp;&amp; right.length) {\n    if (left[0] &lt;= right[0]) {\n      result.push(left.shift());\n    } else {\n      result.push(right.shift);\n    }\n  }\n\n  while(left.length) result.push(left.shift());\n\n  while(right.length) result.push(right.shift());\n\n  return result;\n}\nmergeSort([5,3,8,10,4,1])\n</code></pre>\n",
      content_license = "CC BY-SA 4.0",
      creation_date = 1582053839,
      is_answered = true,
      last_activity_date = 1651630802,
      last_edit_date = 1633644604,
      link = "https://stackoverflow.com/questions/60288089/javascript-merge-sort-and-recursion",
      owner = {
        account_id = 17194345,
        display_name = "shane_00",
        link = "https://stackoverflow.com/users/12447482/shane-00",
        profile_image = "https://www.gravatar.com/avatar/eebb8ca0085efdfd808e4def8f7c5f29?s=256&d=identicon&r=PG&f=1",
        reputation = 91,
        user_id = 12447482,
        user_type = "registered"
      },
      question_id = 60288089,
      score = 4,
      tags = { "javascript", "arrays", "sorting", "recursion", "mergesort" },
      title = "javascript merge sort and recursion",
      view_count = 2126
    }, {
      accepted_answer_id = 32041864,
      answer_count = 1,
      body = "<p>I'm trying to implement merge sort in order to get a better understanding of how it works.  In the following code I am attempting to sort an array of numbers.  The code I currently have is buggy and runs in an infinite loop.  I'm trying to solve this non-recursively for now:</p>\n\n<pre><code>function mergeSort(arr) {\n\n  var mid = Math.floor(arr.length/2);\n  var left = arr.slice(0, mid);\n  var right = arr.slice(mid, arr.length);\n\n  if (arr.length === 1) {return arr};\n\n  var sorted = [];\n\n  var i = 0;\n\n  while (left.length || right.length) {\n   if (left.length &amp;&amp; right.length) {\n     if (left[0] &lt; right[0]) {\n       sorted.push(left.shift())\n     } else {\n       sorted.push(right.shift())\n     }\n   } else if (left) {\n     sorted.push(left.shift())\n   } else {\n     sorted.push(right.shift())\n   }\n   i++;\n  }\n\n  return sorted;\n}\n</code></pre>\n\n<p>So if I have an array <code>var nums = [1, 4, 10, 2, 9, 3];</code> calling <code>mergeSort(nums)</code> should return <code>[1, 2, 3, 4, 9, 10]</code>.</p>\n",
      content_license = "CC BY-SA 3.0",
      creation_date = 1439769312,
      is_answered = true,
      last_activity_date = 1439785424,
      last_edit_date = 1439785424,
      link = "https://stackoverflow.com/questions/32041092/implementing-merge-sort-iteratively",
      owner = {
        account_id = 6640068,
        display_name = "Farhad Ahmed",
        link = "https://stackoverflow.com/users/5126031/farhad-ahmed",
        profile_image = "https://www.gravatar.com/avatar/721615bd3f9780e5454f4465bbdc4fe6?s=256&d=identicon&r=PG",
        reputation = 65,
        user_id = 5126031,
        user_type = "registered"
      },
      question_id = 32041092,
      score = 1,
      tags = { "javascript", "algorithm", "sorting" },
      title = "Implementing merge sort iteratively",
      view_count = 1468
    }, {
      answer_count = 0,
      body = "<p>I am having an issue with my merge sort visualizer.</p>\n<p>My program has no issues visualizing bubble sort or quick sort, as I can do the swapping operation of css property values in-place, but I am having major issues trying to get merge sort to work properly. The issue arises when I try to update a css property on the dom, it causes the sort to not function.</p>\n<p>I have tried passing in copies of the data I wish to sort, and all sorts of weird things I could think of to make it work. I am currently trying to sort by the css property 'maxWidth'. I use that to display how large a div element is in the html file and then visualize the sort from there.</p>\n<p>My latest thought has been to set all the div elements to have another css property equal to the maxWidth (I am using fontSize as it does not affect my program) and then sorting based on fontSize, allowing me in theory to change the maxWidth properties of the divs without affecting merge sorts algorithm.</p>\n<p>I am including my entire js file as I hope reading my correctly working bubble sort or quick sort functions can help you see what I am trying to achieve. Thank you so much for taking the time to read this and offer any help!</p>\n<p><strong>Important Note:</strong> I am not trying to visualize the individual steps of merge sort yet because I am unable to update the final result to the html page without affecting the merge sort algorithm. According to console logs, my merge sort algorithm does indeed work, I just can't update the DOM without messing it up. Once I can do that, I will turn it into an asynchronous function using async and await like I previously did with bubble and quick sort.</p>\n<pre><code>/********* Generate and Store Divs to be Sorted *************/\nconst generateSortingDivs = (numOfDivs) =&gt; {\n    const divContainer = document.querySelector('.div-container');\n    let html = '';\n    for (let i = 0; i &lt; numOfDivs; i++) {\n        let r = Math.floor(Math.random() * 100);\n        html += `&lt;div class='sorting-div' id='id-${i}' style='max-width: ${r}%'&gt;&amp;nbsp&lt;/div&gt;`;\n    }\n    divContainer.innerHTML = html;\n    for(let i = 0; i &lt; numOfDivs; i++) {\n        let x = document.getElementById('id-' + i);\n        x.style.fontSize = x.style.maxWidth;\n    }\n}\n\nconst storeSortingDivs = () =&gt; {\n    const divContainer = document.querySelector('.div-container');\n    let divCollection = [];\n    const numOfDivs = divContainer.childElementCount;\n\n    for(let i=0; i&lt;numOfDivs; i++) {\n        let div = document.getElementById('id-' + i);\n        divCollection.push(div);\n    }\n\n    return divCollection;\n}\n\n/********** SLEEP FUNCTION ************/\n//Used to allow asynchronous visualizations of synchronous tasks\nfunction sleep(ms) {\n    return new Promise(resolve =&gt; setTimeout(resolve, ms));\n}\n\n/******* SWAP FUNCTIONS *********/\n//Used for Testing Algorithm before Animating Visualization\nconst syncSwap = (div1, div2) =&gt; {\n    let tmp = div1.style.maxWidth;\n    div1.style.maxWidth = div2.style.maxWidth;\n    div2.style.maxWidth = tmp;\n}\n\nasync function asyncSwap(div1, div2) {\n    await sleep(50);\n    let tmp = div1.style.maxWidth;\n    div1.style.maxWidth = div2.style.maxWidth;\n    div2.style.maxWidth = tmp;\n}\n\nconst swapDivs = (smallerDiv, biggerDiv) =&gt; {\n    return new Promise(resolve =&gt; {\n        setTimeout(() =&gt; {\n            let tmp = smallerDiv.style.maxWidth;\n            smallerDiv.style.maxWidth = biggerDiv.style.maxWidth;\n            biggerDiv.style.maxWidth = tmp;\n            resolve();\n        }, 50);\n    });\n}\n\n/****************************************/\n/*********** SORTING ALGO'S *************/\n/****************************************/\n\n/******* BUBBLE SORT ***********/\nasync function bubbleSort(divCollection) {\n    displayBubbleSortInfo();\n    const len = divCollection.length;\n    for(let i=0; i&lt;len; i++) {\n        for(let j=0; j&lt;len-i-1; j++) {\n            divCollection[j].style.backgroundColor = &quot;#FF4949&quot;;\n            divCollection[j+1].style.backgroundColor = &quot;#FF4949&quot;;\n\n            let numDiv1 = parseInt(divCollection[j].style.maxWidth);\n            let numDiv2 = parseInt(divCollection[j+1].style.maxWidth);\n            let div1 = divCollection[j];\n            let div2 = divCollection[j+1];\n            if(numDiv1 &gt; numDiv2) {\n                await swapDivs(div2, div1);\n            }\n            divCollection[j].style.backgroundColor = &quot;darkcyan&quot;;\n            divCollection[j+1].style.backgroundColor = &quot;darkcyan&quot;;\n        }\n        divCollection[len - i - 1].style.backgroundColor = 'black';\n    }\n}\n\nfunction displayBubbleSortInfo(){\n    const infoDiv = document.querySelector('.algo-info');\n    let html = `&lt;h1&gt;Bubble Sort Visualizer&lt;/h1&gt;`;\n    html += `&lt;h2&gt;Time Complexity: O(n^2)&lt;/h2&gt;`;\n    html += `&lt;h3&gt;Space Complexity: O(1)&lt;/h3&gt;`;\n    html += `&lt;p&gt;This sorting algorithm loops through the array and continues to push the \n               largest found element into the last position, also pushing the last available\n               position down by one on each iteration. It is guaranteed to run in exactly \n               O(n^2) time because it is a nested loop that runs completely through.&lt;/p&gt;`;\n    infoDiv.innerHTML = html;\n}\n\n/****** QUICK SORT ********/\nasync function quickSort(divCollection, start, end) {\n    if(start &gt;= end) return;\n\n    let partitionIndex = await partition(divCollection, start, end);\n\n    await Promise.all([quickSort(divCollection, start, partitionIndex - 1), quickSort(divCollection, partitionIndex + 1, end)]);\n}\n\n/* This function takes last element as pivot, places\n   the pivot element at its correct position in sorted\n    array, and places all smaller (smaller than pivot)\n   to left of pivot and all greater elements to right\n   of pivot */\nasync function partition(divCollection, start, end) {\n    let pivotIndex = start;\n    let pivotValue = parseInt(divCollection[end].style.maxWidth);\n    for(let i = start; i &lt; end; i++) {\n        if(parseInt(divCollection[i].style.maxWidth) &lt; pivotValue) {\n            await asyncSwap(divCollection[i], divCollection[pivotIndex]);\n            pivotIndex++;\n        }\n    }\n    await asyncSwap(divCollection[pivotIndex], divCollection[end]);\n    return pivotIndex;\n}\n\nfunction displayQuickSortInfo(){\n    const infoDiv = document.querySelector('.algo-info');\n    let html = `&lt;h1&gt;Quick Sort Visualizer&lt;/h1&gt;`;\n    html += `&lt;h2&gt;Time Complexity: O(n log n)&lt;/h2&gt;`;\n    html += `&lt;h3&gt;Space Complexity: O(log n)&lt;/h3&gt;`;\n    html += `&lt;p&gt;This sorting algorithm uses the idea of a partition to sort\n                each iteration recursively. You can implement quick sort\n                in a variety of manners based on the method in which you\n                pick your &quot;pivot&quot; value to partition the array. In this\n                visualization, I implemented the method that chooses the \n                last element of the array as the pivot value. You could\n                also choose the first value, the middle value, or the median\n                value based on the first, middle, and last values.&lt;/p&gt;`;\n    infoDiv.innerHTML = html;\n}\n\n/* Merge Sort does not sort in place, and thus we have to be\n*  clever when implementing it and also editing the css style\n*  of our divs to show the visualization of how the algorithm\n*  works. My method is to store a copy of the divs, that way\n*  I can use one to be sorted by merge sort, and the other to\n*  change the css style property to show the visualization.\n*  Unlike Quick Sort and Bubble Sort, we are not swapping\n*  elements when sorting, instead we are merging entire\n*  arrays together as the name implies.                     */\nfunction mergeSort(divCollection) {\n    if(divCollection.length &lt; 2) return divCollection;\n    let middleIndex = Math.floor(divCollection.length / 2);\n    let left = divCollection.slice(0, middleIndex);\n    let right = divCollection.slice(middleIndex);\n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right) {\n    let mergedCollection = [];\n    while(left.length &amp;&amp; right.length) {\n        if(parseInt(left[0].style.fontSize) &lt; parseInt(right[0].style.fontSize || right.length === 0)) {\n            let el = left.shift();\n            mergedCollection.push(el);\n        } else {\n            let el = right.shift();\n            mergedCollection.push(el);\n        }\n    }\n\n    let res = mergedCollection.concat(left.slice().concat(right.slice()));\n\n    return res;\n}\n\n\n/***** INITIALIZATION FUNCTION *******/\ngenerateSortingDivs(10);\nlet divs = storeSortingDivs();\nlet copyDivs = [...divs];\nconsole.log('Original State: ')\nconsole.log(divs);\n//bubbleSort(divs);\n//displayQuickSortInfo();\n//quickSort(divs, 0, divs.length-1);\nlet x = mergeSort(copyDivs);\nconsole.log('Sorted: ');\nconsole.log(x);\n</code></pre>\n",
      content_license = "CC BY-SA 4.0",
      creation_date = 1592934387,
      is_answered = false,
      last_activity_date = 1592945784,
      last_edit_date = 1592945784,
      link = "https://stackoverflow.com/questions/62540794/javascript-merge-sort-visualizer-using-css-style-to-sort-having-issues",
      owner = {
        account_id = 17303275,
        display_name = "Alexander Skinner",
        link = "https://stackoverflow.com/users/12532555/alexander-skinner",
        profile_image = "https://lh6.googleusercontent.com/-ymKyFTaZOD8/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rdPTYLi5wxuvBg0g4zKzas2HjWVjw/photo.jpg?sz=256",
        reputation = 31,
        user_id = 12532555,
        user_type = "registered"
      },
      question_id = 62540794,
      score = 2,
      tags = { "javascript", "css", "dom", "async-await", "mergesort" },
      title = "Javascript - Merge Sort Visualizer using CSS Style to Sort, having issues",
      view_count = 281
    }, {
      accepted_answer_id = 55310038,
      answer_count = 2,
      body = "<p>I have managed to get a merge sort working in p5.js to sort different length lines but can not figure out how to actually show them being sorted. I.e show them unsorted and then update their position as they are being sorted. I'm not sure if there is an easy way to do this with the way my code is currently written or if I need to break the sorting function up and re draw it after each stage?</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var values = [];\r\nvar numLines = 500;\r\n\r\nfunction setup() {\r\n  createCanvas(900, 600);\r\n  colorMode(HSB, height);\r\n  for (i = 0; i &lt; numLines; i++) {\r\n    values[i] = (round(random(height)));\r\n  }\r\n  \r\n\tvalues = mergeSort(values);\r\n\t\r\n  noLoop();\r\n }\r\n\r\n\r\nfunction draw() {\r\n  background(51);\r\n\r\n  for (let i = 0; i &lt; values.length; i++) {\r\n    let col = color(values[i], height, height);\r\n    stroke(col);\r\n    fill(col);\r\n    var location = map(i, 0, values.length, 0, width);\r\n    rect(location, height - values[i], width/numLines, height);\r\n  } \r\n}\r\n\r\nfunction mergeSort(a) {\r\n  if (a.length &lt;= 1) {\r\n    return a;\r\n  }\r\n  var mid = Math.round((a.length / 2));\r\n  var left = a.slice(0, mid);\r\n  var right = a.slice(mid);\r\n  return merge(mergeSort(left), mergeSort(right));\r\n}\r\n\r\nfunction merge(left, right) {\r\n  sorted = [];\r\n  \r\n  while (left &amp;&amp; left.length &gt; 0 &amp;&amp; right &amp;&amp; right.length &gt; 0) {\r\n    if (left[0] &lt;= right[0]) {\r\n      sorted.push(left.shift());\r\n    }\r\n    else {\r\n      sorted.push(right.shift());\r\n    }\r\n  }\r\n  return sorted.concat(left, right);\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.2/p5.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
      content_license = "CC BY-SA 4.0",
      creation_date = 1553197270,
      is_answered = true,
      last_activity_date = 1553308192,
      last_edit_date = 1553233556,
      link = "https://stackoverflow.com/questions/55288158/javascript-merge-sort-visualisation",
      owner = {
        account_id = 15565267,
        display_name = "James Huish",
        link = "https://stackoverflow.com/users/11229244/james-huish",
        profile_image = "https://lh5.googleusercontent.com/-XMoKfVzPC_0/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3re3H1XpS8qnFxbhIwhYRItSPEIZwQ/mo/photo.jpg?sz=256",
        reputation = 13,
        user_id = 11229244,
        user_type = "registered"
      },
      question_id = 55288158,
      score = 1,
      tags = { "javascript", "mergesort", "p5.js" },
      title = "Javascript merge sort visualisation",
      view_count = 1529
    }, {
      accepted_answer_id = 31363156,
      answer_count = 1,
      body = "<p>I was writing the merge sort algorithm, and in the merge helper function, I had the following comparison statement:</p>\n\n<pre><code>    function merge(a,b){\n        var result = [];\n            while(a.length &amp;&amp; b.length){\n                    result.push(a[0] &lt; b[0] ? a.shift() : b.shift()); // you can't just grab a[0] or b[0] \n        //as it results in a fatal error.\n                }\nreturn, etc.\n}\n</code></pre>\n\n<p>Why is it that when instead of 'a.shift()', I typed a[0], it resulted in a fatal error? Is it because you are doing something with something that's also in a conditional clause?</p>\n",
      content_license = "CC BY-SA 3.0",
      creation_date = 1436656910,
      is_answered = true,
      last_activity_date = 1436660394,
      link = "https://stackoverflow.com/questions/31362821/javascript-merge-sort-fatal-error",
      owner = {
        accept_rate = 99,
        account_id = 5227086,
        display_name = "devdropper87",
        link = "https://stackoverflow.com/users/4178793/devdropper87",
        profile_image = "https://www.gravatar.com/avatar/36f2424c00c012ac3631428865caa9d0?s=256&d=identicon&r=PG&f=1",
        reputation = 3565,
        user_id = 4178793,
        user_type = "registered"
      },
      question_id = 31362821,
      score = 0,
      tags = { "javascript", "algorithm", "sorting", "merge", "mergesort" },
      title = "javascript merge/sort fatal error",
      view_count = 47
    }, {
      answer_count = 1,
      body = '<p>On the <a href="http://rosettacode.org/wiki/Sorting_algorithms/Merge_sort#JavaScript" rel="nofollow">rosettacode page</a> for merge sort the javaScript example for has the following function:</p>\n\n<pre><code>1 function merge(left,right,arr){\n2    var a=0;\n3    while(left.length&amp;&amp;right.length)\n4       arr[a++]=right[0]&lt;left[0]?right.shift():left.shift();\n5    while(left.length)arr[a++]=left.shift();\n6    while(right.length)arr[a++]=right.shift();\n7 }\n</code></pre>\n\n<p>Can someone please explain what is happening on line 4?</p>\n',
      content_license = "CC BY-SA 3.0",
      creation_date = 1379891316,
      is_answered = false,
      last_activity_date = 1399832999,
      last_edit_date = 1399832999,
      link = "https://stackoverflow.com/questions/18949689/javascript-syntax-rosetta-code-merge-sort",
      owner = {
        display_name = "user1690442",
        user_type = "does_not_exist"
      },
      question_id = 18949689,
      score = 0,
      tags = { "javascript", "syntax", "semantics", "mergesort" },
      title = "javascript syntax - rosetta code merge sort",
      view_count = 176
    }, {
      answer_count = 2,
      body = "<p>What's wrong with following implementation of merge sort algorithm. it just returns <strong>undefined</strong>. </p>\n\n<p>I suspect the error is somewhere in merge function. </p>\n\n<p>can someone help me point out the error. </p>\n\n<pre><code>    function mergeSort(arr1, lower, higher) {\n\n    if (lower &lt; higher) {\n        var mid = Math.floor((lower + higher) / 2);\n        mergeSort(arr1, lower, mid);\n        mergeSort(arr1, mid + 1, higher);\n        merge(arr1, lower, mid, higher);\n    }\n}\n</code></pre>\n\n<p>And merge function</p>\n\n<pre><code>function merge(arr1, lower, mid, higher) {\n\n    var i = lower;\n    var j = mid + 1;\n    var k = 0;\n    var mergearr = [];\n\n    while (i &lt; j &amp;&amp; j &lt;= higher) {\n\n        if (arr1[i] &lt;= arr1[j]) {\n            mergearr[k] = arr1[i];\n            k++;\n            i++;\n        } else {\n            mergearr[k] = arr1[j];\n            k++;\n            j++;\n        }\n\n    }\n\n    if (i === j) {\n        while (j &lt; higher) {\n            mergearr[k] = arr1[j];\n            k++;\n            j++;\n        }\n    } else if (j &gt; higher) {\n        while (i &lt; j) {\n            mergearr[k] = arr1[i];\n            k++;\n            i++;\n        }\n    }\n\n\n    for (var a = 0; a &lt;= k; a++) {\n        console.log(a);\n        arr1[a] = mergearr[a];\n        console.log(arr1[a]);\n    }\n\n    return arr1;\n}\n</code></pre>\n\n<p>Here is output on the console</p>\n\n<pre><code>index: 0\n value: 4\nindex: 1\n value: 5\nindex: 2\n value: 4\nindex: 3\n value: undefined\nindex: 0\n value: 4\nindex: 1\n value: 4\nindex: 2\n value: 5\nindex: 3\n value: 4\nindex: 4\n value: undefined\nindex: 0\n value: undefined\nindex: 1\n value: 4\nindex: 2\n value: undefined\nindex: 3\n value: undefined\nindex: 0\n</code></pre>\n",
      content_license = "CC BY-SA 3.0",
      creation_date = 1478956552,
      is_answered = false,
      last_activity_date = 1496187658,
      link = "https://stackoverflow.com/questions/40563219/simple-implementation-of-merge-sort-in-javascript",
      owner = {
        accept_rate = 58,
        account_id = 5551483,
        display_name = "HVenom",
        link = "https://stackoverflow.com/users/4404355/hvenom",
        profile_image = "https://www.gravatar.com/avatar/b3a17dd80a87baa88e1036c0122528de?s=256&d=identicon&r=PG&f=1",
        reputation = 602,
        user_id = 4404355,
        user_type = "registered"
      },
      question_id = 40563219,
      score = 1,
      tags = { "javascript", "mergesort" },
      title = "Simple implementation of merge sort in javascript",
      view_count = 337
    }, {
      accepted_answer_id = 54402642,
      answer_count = 1,
      body = "<p>I am trying to make parallel version of merge sort algorithm using web-workers.</p>\n\n<p>Parallel version is very slow on small arrays (due to overhead of promises and web-workers i think) but surprisingly it is also slower than serial sort on big arrays</p>\n\n<p>Parallel version</p>\n\n<pre><code>console.log(navigator.hardwareConcurrency + \" threads\")\nvar blob = new Blob([\n    `onmessage = function(e) { \n\nfunction merge_sort(arr) {\n  let length = arr.length;        \n  if (length &lt; 2) {\n    return arr\n  }\n let middle = Math.floor(length/2)\n let left = arr.slice(0, middle)     \n let right = arr.slice(middle)     \n return merge(merge_sort(left), merge_sort(right))\n}\n\nfunction merge(left, right) {\n  let result = [];\n  let i=0;\n  let j=0;\n  while(i &lt; left.length &amp;&amp; j &lt; right.length) {\n    if(left[i] &lt; right[j]) {\n      result.push(left[i]) ;\n      i++;       \n    } else {                       \n      result.push(right[j]);\n      j++;\n    }\n  }\n  return result.concat(left.slice(i)).concat(right.slice(j))\n} \n   if(e.data.job==='sort'){\n    postMessage(merge_sort(e.data.arr));\n}else{\n     postMessage(merge(e.data.arr[0],e.data.arr[1]))\n}\n         }`\n]);  \nvar blobURL = window.URL.createObjectURL(blob);\nvar v1 = new Worker(blobURL);\nvar v2 = new Worker(blobURL);\nvar v3 = new Worker(blobURL);\nvar v4 = new Worker(blobURL);\n\nfunction merge(left, right) {\n    let result = [];\n    let i = 0;\n    let j = 0;\n    while (i &lt; left.length &amp;&amp; j &lt; right.length) {\n        if (left[i] &lt; right[j]) {\n            result.push(left[i]);\n            i++;\n        } else {\n            result.push(right[j]);\n            j++;\n        }\n    }\n    return result.concat(left.slice(i)).concat(right.slice(j))\n}\n\nvar arr = Array.from({\n    length: 20000000\n}, () =&gt; Math.floor(Math.random() * 50000000));\n\nvar half1 = []\nvar half2 = []\nvar half_1 = []\nvar half_2 = []\nvar half_3 = []\nvar half_4 = []\nlet middle = Math.floor(arr.length / 2)\nhalf1 = arr.slice(0, middle)\nhalf2 = arr.slice(middle)\n\nlet middlehalf1 = Math.floor(half1.length / 2)\nhalf_1 = half1.slice(0, middlehalf1)\nhalf_2 = half1.slice(middlehalf1)\n\nlet middlehalf2 = Math.floor(half2.length / 2)\nhalf_3 = half2.slice(0, middlehalf2)\nhalf_4 = half2.slice(middlehalf2)\nvar t0 = performance.now();\n\nvar p1 = new Promise((resolve, reject) =&gt; {\n    v1.postMessage({\n        job: 'sort',\n        arr: half_1\n    });\n    v1.addEventListener('message', event =&gt; resolve(event.data));\n    v1.addEventListener('error', reject);\n})\nvar p2 = new Promise((resolve, reject) =&gt; {\n    v2.postMessage({\n        job: 'sort',\n        arr: half_2\n    });\n    v2.addEventListener('message', event =&gt; resolve(event.data));\n    v2.addEventListener('error', reject);\n})\nvar p3 = new Promise((resolve, reject) =&gt; {\n    v3.postMessage({\n        job: 'sort',\n        arr: half_3\n    });\n    v3.addEventListener('message', event =&gt; resolve(event.data));\n    v3.addEventListener('error', reject);\n})\nvar p4 = new Promise((resolve, reject) =&gt; {\n    v4.postMessage({\n        job: 'sort',\n        arr: half_4\n    });\n    v4.addEventListener('message', event =&gt; resolve(event.data));\n    v4.addEventListener('error', reject);\n})\n\nPromise.all([p1, p2, p3, p4]).then(function(results) {\n    //console.log( )\n    var p5 = new Promise((resolve, reject) =&gt; {\n        v1.addEventListener('message', event =&gt; resolve(event.data));\n        v1.addEventListener('error', reject);\n    })\n    var p6 = new Promise((resolve, reject) =&gt; {\n        v2.addEventListener('message', event =&gt; resolve(event.data));\n        v2.addEventListener('error', reject);\n    })\n    v1.postMessage({\n        job: 'merge',\n        arr: [results[0], results[1]]\n    });\n    v2.postMessage({\n        job: 'merge',\n        arr: [results[2], results[3]]\n    });\n\n    Promise.all([p5, p6]).then(function(arrays) {\n        merge(arrays[0], arrays[1])\n        var t1 = performance.now();\n        console.log(`merge_sort took ${(t1 - t0) / 1000} seconds`)\n    })\n\n});\n</code></pre>\n\n<p>Serial version</p>\n\n<pre><code>function merge_sort(arr) {\n  let length = arr.length;        \n  if (length &lt; 2) {\n    return arr\n  }\n let middle = Math.floor(length/2)\n let left = arr.slice(0, middle)     \n let right = arr.slice(middle)     \n return merge(merge_sort(left), merge_sort(right))\n}\n\nfunction merge(left, right) {\n  let result = [];\n  let i=0;\n  let j=0;\n  while(i &lt; left.length &amp;&amp; j &lt; right.length) {\n    if(left[i] &lt; right[j]) {\n      result.push(left[i]) ;\n      i++;       \n    } else {                       \n      result.push(right[j]);\n      j++;\n    }\n  }\n  return result.concat(left.slice(i)).concat(right.slice(j))\n}\nvar BigArray =Array.from({ length: 20000000 }, ()=&gt;Math.floor(Math.random() * 50000000)); \nvar t0 = performance.now();\nmerge_sort(BigArray)\nvar t1 = performance.now();\nconsole.log(`merge_sort took ${(t1 - t0) / 1000} seconds`)\n</code></pre>\n\n<p>Also i am looking for a better solution with parallel sort (my use of promises looks awful)</p>\n",
      content_license = "CC BY-SA 4.0",
      creation_date = 1548679730,
      is_answered = true,
      last_activity_date = 1548683860,
      link = "https://stackoverflow.com/questions/54402395/parallel-sort-using-web-workers-is-slower-than-serial-sort-merge-sort",
      owner = {
        account_id = 9295910,
        display_name = "no_vice",
        link = "https://stackoverflow.com/users/10072176/no-vice",
        profile_image = "https://lh5.googleusercontent.com/-jl3IwdC5Vqo/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7pCuP9Q55Oqb_DqkNjfcQolEBxa1Q/mo/photo.jpg?sz=256",
        reputation = 13,
        user_id = 10072176,
        user_type = "registered"
      },
      question_id = 54402395,
      score = 1,
      tags = { "javascript", "mergesort", "web-worker" },
      title = "Parallel sort using web workers is slower than serial sort (merge sort)",
      view_count = 258
    }, {
      accepted_answer_id = 27065970,
      answer_count = 7,
      body = "<p>So I'm working on Khan Academy's Algorithms course, and am trying to implement a recursive merge sort in Javascript. Here is my code so far:</p>\n\n<pre><code>var mergeSort = function(array, p, r) {\n    if(r&gt;p) {\n        var q = floor(r/2);\n        mergeSort(array, p, q);\n        mergeSort(array, q+1, r);\n        merge(array, p, q, r);\n    }\n};\n</code></pre>\n\n<p>merge is a function provided by Khan Academy to merge the subarrays back together. It is giving me the error: 'Uncaught RangeError: Maximum call stack size exceeded'.</p>\n\n<p>EDIT: More details: I am fairly sure the error is in my code, there code is purposefully obfuscated and unreadable because the user needs to implement it themselves in a later challenge.</p>\n\n<p>Here is the code that actually calls the mergeSort function initially and declares the array:</p>\n\n<pre><code>var array = [14, 7, 3, 12, 9, 11, 6, 2];\nmergeSort(array, 0, array.length-1);\nprintln(\"Array after sorting: \" + array);\nProgram.assertEqual(array, [2, 3, 6, 7, 9, 11, 12, 14]);\n</code></pre>\n\n<p>And here is the code for the merge function, although it is obfuscared as I mentioned above:</p>\n\n<pre><code>var merge = function(array, p, q, r) {\n    var a = [],\n        b = [],\n        c = p,\n        d, e;\n    for (d = 0; c &lt;= q; d++, c++) {\n        a[d] = array[c];\n    }\n    for (e = 0; c &lt;= r; e++, c++) {\n        b[e] = array[c];\n    }\n    c = p;\n    for (e = d = 0; d &lt; a.length &amp;&amp; e &lt; b.length;) {\n        if (a[d] &lt; b[e]) {\n            array[c] = a[d];\n            d++;\n        } else {\n            array[c] = b[e];\n            e++;\n        }\n        c++;\n    }\n    for (; d &lt; a.length;) {\n        array[c] = a[d];\n        d++;\n        c++;\n    }\n    for (; e &lt; b.length;) {\n        array[c] = b[e];\n        e++;\n        c++;\n    }\n};\n</code></pre>\n\n<p>They also require my code inside of the mergeSort function be of the form:</p>\n\n<pre><code>if (____) {\n    var ____ = ____;\n    mergeSort(____,____,____);\n    mergeSort(____,____,____);\n    merge(____,____,____,____);\n}\n</code></pre>\n",
      content_license = "CC BY-SA 3.0",
      creation_date = 1416586777,
      is_answered = true,
      last_activity_date = 1636320691,
      last_edit_date = 1416587466,
      link = "https://stackoverflow.com/questions/27065824/implementing-merge-sort-in-javascript",
      owner = {
        account_id = 5335054,
        display_name = "Jeff Stevens",
        link = "https://stackoverflow.com/users/4254362/jeff-stevens",
        profile_image = "https://www.gravatar.com/avatar/e48efbd753f6262e412d144cddc3785d?s=256&d=identicon&r=PG&f=1",
        reputation = 137,
        user_id = 4254362,
        user_type = "registered"
      },
      question_id = 27065824,
      score = 5,
      tags = { "javascript" },
      title = "Implementing merge sort in Javascript",
      view_count = 8120
    }, {
      accepted_answer_id = 28141365,
      answer_count = 1,
      body = "<p>I'm trying to implement merge sort algorithm in JavaScript. But I'm getting a strange behavior when it comes to merging two sorted arrays.</p>\n\n<p>When I pass those two arrays: <code>[1,4, 5]</code> and <code>[3, 6, 7, 10]</code> to the merge function, I always get this result: <code>[ 1, 3, 4, 6, 7 ]</code>. Strangely without the element <code>5</code> and <code>10</code> ! </p>\n\n<p>Here's my function:</p>\n\n<pre><code>function merge(a, b)\n{\n    var result = [],\n        k = 0,\n        i = 0,\n        j = 0;\n\n    while(a.length &gt; i+1 &amp;&amp; b.length &gt; j+1){\n        if(a[i] &lt;= b[j]){\n            result[k++] = a[i++];\n        } else {\n            result[k++] = b[j++];\n        }\n    }\n\n    while(a.length &gt; i+1) {\n        result[k++] = a[i++];\n    }\n\n    while(b.length &gt; j+1) {\n        result[k++] = b[j++];\n    }\n\n    return result;\n}\n</code></pre>\n\n<p>Any help would be appreciated. </p>\n\n<p>Thanks.</p>\n",
      content_license = "CC BY-SA 3.0",
      creation_date = 1422218660,
      is_answered = true,
      last_activity_date = 1422219349,
      last_edit_date = 1422219349,
      link = "https://stackoverflow.com/questions/28141261/implementing-merge-sort-algorithm-in-javascript",
      owner = {
        accept_rate = 81,
        account_id = 450184,
        display_name = "Rafael Adel",
        link = "https://stackoverflow.com/users/845371/rafael-adel",
        profile_image = "https://www.gravatar.com/avatar/8095efdc89f4a70029477fcb58cddd06?s=256&d=identicon&r=PG",
        reputation = 7411,
        user_id = 845371,
        user_type = "registered"
      },
      question_id = 28141261,
      score = 0,
      tags = { "javascript", "algorithm", "sorting", "merge", "mergesort" },
      title = "Implementing merge sort algorithm in JavaScript",
      view_count = 1372
    }, {
      accepted_answer_id = 46973665,
      answer_count = 1,
      body = "<p>I'm studying about merge sort and implement it in JavaScript, but it returned an error:</p>\n\n<blockquote>\n  <p>function mergeSort(input) {</p>\n  \n  <p>RangeError: Maximum call stack size exceeded</p>\n</blockquote>\n\n<p>Here is my code:</p>\n\n<pre><code>var array = [2,4,6,7,1,3,5,10,9,8];\n\n// using merge sort: (best sort =&gt; O (n log n))\nfunction mergeSort (array) {\nvar array1 = [];\nvar array2 = [];\n\nfor (let i = 0; i &lt; array.length/2; i++) {\n    array1.push(array[i]);\n}\n\nfor (let i = array.length/2; i &lt; array.length; i++) {\n    array2.push(array[i]);\n}\n\narray1 = mergeSort(array1);\narray2 = mergeSort(array2);\n\nreturn merge(array1, array2);\n}\n\nfunction merge(a, b) {\nlet c = [];\n\nwhile(a.length &gt; 0 &amp;&amp; b.length &gt; 0) {\n    if (a[0] &gt; b[0]) {\n        c.push(b[0]);\n        b.splice(0, 1);\n    } else {\n        c.push(a[0]);\n        a.splice(0, 1);\n    }\n}\n\nwhile (a.length &gt; 0) {\n    c.push(a[0]);\n    a.splice(0, 1);\n}\n\nwhile (b.length &gt; 0) {\n    c.push(b[0]);\n    b.splice(0, 1);\n}\n\nreturn c;\n}\n\nconsole.log(mergeSort(array));\n</code></pre>\n\n<p>I guess the error is in <code>mergeSort</code> function. I'm implementing it with a recursion.</p>\n",
      content_license = "CC BY-SA 3.0",
      creation_date = 1509101191,
      is_answered = true,
      last_activity_date = 1509446914,
      last_edit_date = 1509446914,
      link = "https://stackoverflow.com/questions/46973257/maximum-call-stack-size-exceeded-in-merge-sort",
      owner = {
        accept_rate = 91,
        account_id = 11030146,
        display_name = "Keitaro Urashima",
        link = "https://stackoverflow.com/users/8101715/keitaro-urashima",
        profile_image = "https://graph.facebook.com/299199143829568/picture?type=large",
        reputation = 671,
        user_id = 8101715,
        user_type = "registered"
      },
      question_id = 46973257,
      score = 1,
      tags = { "javascript", "algorithm", "mergesort" },
      title = "Maximum call stack size exceeded in merge sort",
      view_count = 895
    }, {
      answer_count = 1,
      body = '<p>I am trying to learn more about sorting algorithms. This is my merge sort implementation. Is there any problem with my algo. Believe i am missing out something.</p>\n\n<p><div class="snippet" data-lang="js" data-hide="false">\r\n<div class="snippet-code">\r\n<pre class="snippet-code-js lang-js prettyprint-override"><code>var arr = [1,5,3,2,4,78,3,2];\r\n\r\nalert(mergeSort(arr));\r\n\r\nfunction mergeSort(arr){\r\n\tvar len = arr.length;\r\n\tvar mid = Math.floor(len/2);\r\n\tvar left = arr.slice(0,mid);\r\n\tvar right = arr.slice(mid);\r\n\r\n\tif(len &lt; 2) return arr;\r\n\r\n\treturn merge(mergeSort(left),mergeSort(right));\r\n}\r\n\r\n\r\nfunction merge(left, right){\r\n\tvar res = [];\r\n\tvar lLeft = left.length;\r\n\tvar lRight = right.length;\r\n\tvar l = 0;\r\n\tvar r = 0;\r\n\r\n\twhile(l &lt; lLeft &amp;&amp; r &lt; lRight){\r\n\t\tif(left[l] &lt; right[r]){\r\n\t\t\tres.push(left[l++]);\r\n\t\t}else{\r\n\t\t\tres.push(right[r++]);\t\r\n\t\t}\r\n\t}\r\n\r\n\treturn res;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n',
      content_license = "CC BY-SA 3.0",
      creation_date = 1456470851,
      is_answered = false,
      last_activity_date = 1456470950,
      link = "https://stackoverflow.com/questions/35645675/merge-sort-implementation-not-working-in-javascript",
      owner = {
        accept_rate = 78,
        account_id = 1078402,
        display_name = "Slay",
        link = "https://stackoverflow.com/users/1313296/slay",
        profile_image = "https://www.gravatar.com/avatar/27d0d83cbfb3f102c4006c6975ac199e?s=256&d=identicon&r=PG",
        reputation = 1277,
        user_id = 1313296,
        user_type = "registered"
      },
      question_id = 35645675,
      score = 0,
      tags = { "javascript", "algorithm", "sorting" },
      title = "Merge Sort Implementation Not Working in Javascript",
      view_count = 157
    }, {
      accepted_answer_id = 35660704,
      answer_count = 2,
      body = "<p>I am trying to do merge sort in JS and don't understand where I am messing up.  I want this to return [1,2,3,4] and it returns [1,1,1,4].</p>\n\n<p>What part of it needs to change?</p>\n\n<pre><code>var array = [3,2,1,4]\n\nfunction mergeSort(array) {\n    if (array.length === 1) {\n        return array\n    } else {\n        mid = Math.floor(array.length/2)\n        left = mergeSort(array.slice(0, mid))\n        right = mergeSort(array.slice(mid, array.length))\n        return merge(left, right)\n    }\n}\n\nfunction merge(left, right) {\n    var leftIndex = 0\n    var rightIndex = 0\n    var sorted = []\n\n    while (leftIndex &lt; left.length &amp;&amp; rightIndex &lt; right.length) {\n        if (left[leftIndex] &lt;= right[rightIndex]) {\n            sorted.push(left[leftIndex])\n            leftIndex += 1\n        } else {\n            sorted.push(right[rightIndex])\n            rightIndex += 1\n        }\n    }\n\n    if (leftIndex &lt; left.length) {\n        sorted = sorted.concat(left.slice(leftIndex))\n    } else if (rightIndex &lt; right.length) {\n        sorted = sorted.concat(right.slice(rightIndex))\n    }\n    return sorted\n}\n\nconsole.log(mergeSort(array))\n</code></pre>\n",
      content_license = "CC BY-SA 3.0",
      creation_date = 1456515390,
      is_answered = true,
      last_activity_date = 1456519090,
      link = "https://stackoverflow.com/questions/35660210/merge-sort-in-javascript-returns-repeated-elements",
      owner = {
        accept_rate = 89,
        account_id = 1105107,
        display_name = "humanbeing",
        link = "https://stackoverflow.com/users/1096662/humanbeing",
        profile_image = "https://www.gravatar.com/avatar/848d16d1be83e601478a409c02b502c0?s=256&d=identicon&r=PG",
        reputation = 1509,
        user_id = 1096662,
        user_type = "registered"
      },
      question_id = 35660210,
      score = 1,
      tags = { "javascript" },
      title = "merge sort in javascript returns repeated elements",
      view_count = 70
    }, {
      accepted_answer_id = 32074130,
      answer_count = 1,
      body = "<p>I wanted to implement merge sort with Javascript as a learning experience. I have the function mergeSort(unsortedArray) which takes an unsorted array and sorts it using the merge sort strategy. mergeSort() calls merge(leftArray,rightArray), which merges two sorted arrays together to result in one sorted array.</p>\n\n<p>I believe the problem is with the merge() function. When calling mergeSort on the array:[8,8,7,5,4,6,3,2,1,5,9,8,7,6,5,4,2,3,6,5,4,8] I'm getting the result:[1,4,2,3,5,5,9,6,7,8,8]. The root of the problem as far as I know is that in the merge() function, when doing the comparison of leftArray[0] and rightArray[0], the rightArray[0] is sometimes returning multiple values instead of just the first index. In my case its doing it with 2,3 and 5,9. So when the code runs, rightArray[0] = 2,3 sometimes, and rightArray[0]=5,9 after the 2,3 is spliced off the array. Here's what happens within merge() when this problem occurs:</p>\n\n<h2>Step1</h2>\n\n<p>leftArray:[4,5,6,7,8,8]<br>\nrightArray:[1,2,3,5,9]<br>\nresult: []<br></p>\n\n<h2>Step2</h2>\n\n<p>leftArray[4,5,6,7,8,8]<br>\nrightArray[2,3,5,9]<br>\nresult:[1]<br></p>\n\n<h2>Step3</h2>\n\n<p>(improper indexing... array[0] is returning two values)<br>\nleftArray[0]=4 <br>\nrightArray[0]=2,3 <br></p>\n\n<p>leftArray[5,6,7,8,8] <br>\nrightArray[2,3,5,9] <br>\nresult[1,4] <br></p>\n\n<h2>Step4</h2>\n\n<p>(improper indexing... array[0] is returning two values)<br>\nleftArray[0]=5<br>\nrightArray[0]=2,3<br></p>\n\n<p>leftArray[5,6,7,8,8]<br>\nrightArray[5,9]<br>\nresult[1,4,2,3]<br></p>\n\n<p>...The array[0] index screws up again and returns rightArray[0] = 5,9 next. The weird part is if I call my merge() function on leftArray=[4,5,6,7,8,8] and rightArray[1,2,3,5,9] independant of mergeSort() it works fine and returns the proper result without the weird index behavior.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>//Implement Merge Sort...\r\n    function mergeSort(unsortedArray) {\r\n        var leftArray = [];\r\n        var rightArray = [];\r\n        var result = [];\r\n        \r\n        //Base Case of one element\r\n        if(unsortedArray.length &lt;= 1){\r\n            //alert(\"Array is size 1 and value: \" + unsortedArray);\r\n            return unsortedArray;\r\n        }\r\n        else{\r\n            var halfwayPoint = Math.round(unsortedArray.length/2);\r\n            \r\n            //Sepertate unsortedArray into a left and right array\r\n            for(var i = 0; i &lt; halfwayPoint; i++){\r\n                leftArray.push(unsortedArray[i]);\r\n                //alert(\"leftArray: \"+ leftArray + \" index i = \" + i);\r\n            }\r\n            for(var i = halfwayPoint; i &lt; unsortedArray.length; i++){\r\n                rightArray.push(unsortedArray[i]);\r\n                //alert(\"rightArray\" + rightArray + \" index i = \" + i);\r\n            }\r\n            //alert(\"leftArray: \" + leftArray + \" rightArray: \" + rightArray);\r\n            leftArray = mergeSort(leftArray);\r\n            rightArray = mergeSort(rightArray);\r\n            //alert(\"Arrays before merge = leftArray: \" + leftArray + \" rightArray: \" + rightArray);\r\n            result = merge(leftArray, rightArray);\r\n            //alert(\"result: \" + result);\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    //Helper function Merge for MergeSort\r\n    function merge(leftArray, rightArray)\r\n    {\r\n        var result = [];\r\n        while(leftArray.length &gt; 0 &amp;&amp; rightArray.length &gt; 0){\r\n            //compare first items of both lists\r\n            //alert(\"top of while loop\");\r\n            //alert(\"leftArray[0] = \" + leftArray[0] + \" rightArray[0] = \" + rightArray[0]);\r\n            if(leftArray[0] &gt;= rightArray[0]){\r\n                result.push(rightArray[0]);\r\n                //alert(\"result after push rightArray[0] \" + result + \" and rightArray before splice: \"+ rightArray);\r\n                rightArray.splice(0,1);\r\n                //alert(\"rightArray after splce: \" + rightArray);\r\n            }\r\n            else{\r\n                result.push(leftArray[0]);\r\n                //alert(\"result after push leftArray[0] \" + result + \" and leftArray before splice: \"+ leftArray);\r\n                leftArray.splice(0,1);\r\n                //alert(\"leftArray after splce: \" + leftArray);\r\n            }\r\n        }\r\n        //alert(\"before leftArray add\");\r\n        if(leftArray.length &gt; 0){\r\n            //alert(\"went into left array &gt; 0 leftArray: \" + leftArray);\r\n            result.push(leftArray);\r\n        }\r\n        //alert(\"before rightArray add\");\r\n        if(rightArray.length &gt; 0){\r\n            //alert(\"went into right array &gt; 0 rightArray: \" + rightArray);\r\n            result.push(rightArray);\r\n        }\r\n        //alert(\"result within merge function: \" + result);\r\n        return result;\r\n    }\r\n    //Test Case\r\n    var unsortedArray = [8,8,7,5,4,6,3,2,1,5,9,8,7,6,5,4,2,3,6,5,4,8];\r\n    var sortedArray = mergeSort(unsortedArray);\r\n    lert(sortedArray);\r\n  \r\n    //Problem is when Merge sort has left array and right array described below\r\n    //the merge function will yield proper result on left array and right array\r\n    //if called directly as it is below, however when merge is called through\r\n    //mergeSort with leftArray and rightArray as described below it yields\r\n    // improperResult below\r\n    var leftArray = [4,5,6,7,8,8];\r\n    var rightArray = [1,2,3,5,9];\r\n    var improperResult= [1,4,2,3,5,5,9,6,7,8,8];\r\n    var resultAct = merge(leftArray,rightArray);\r\n    alert(resultAct);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;h1&gt;MergeSort Problem&lt;/h1&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
      content_license = "CC BY-SA 3.0",
      creation_date = 1439904865,
      is_answered = true,
      last_activity_date = 1439905973,
      link = "https://stackoverflow.com/questions/32073950/merge-sort-merge-function-array-index-zero-returning-multiple-indexes",
      owner = {
        accept_rate = 100,
        account_id = 2212296,
        display_name = "Evan Stenger",
        link = "https://stackoverflow.com/users/1953797/evan-stenger",
        profile_image = "https://www.gravatar.com/avatar/e86ba73536c4ffa1d56a436a60edcf35?s=256&d=identicon&r=PG",
        reputation = 91,
        user_id = 1953797,
        user_type = "registered"
      },
      question_id = 32073950,
      score = 1,
      tags = { "javascript", "arrays", "sorting", "merge", "mergesort" },
      title = "Merge Sort: merge function array index zero returning multiple indexes",
      view_count = 135
    }, {
      accepted_answer_id = 48922193,
      answer_count = 1,
      body = "<p>I'm doing a course on Khan Academy on Algorithms.<br>\nI usually try to figure out the examples by myself but this time I am really not getting it. The exercise is at: <a href=\"https://www.khanacademy.org/computing/computer-science/algorithms/merge-sort/p/challenge-implement-merge-sort\" rel=\"nofollow noreferrer\">Khan Academy Merge Sort Exercise</a>.<br>\nSo I'm asking a kind person to please resolve this exercise for me, because I'm stuck and it is the first time that I can't implement something. I'm sure that I will understand the algorithm (I think I do, but it gives me errors on implementing, so apparently I'm not understanding) after seem the resolution.<br>\nHere is the code that I have done so far:</p>\n\n<pre><code>// Takes in an array that has two sorted subarrays,\n//  from [p..q] and [q+1..r], and merges the array\nvar merge = function(array, p, q, r) {\n    // This code has been purposefully obfuscated,\n    //  as you'll write it yourself in next challenge.\n    var a=[],b=[],c=p,d,e;for(d=0;c&lt;=q;d++,c++){a[d]=array[c];}for(e=0;c&lt;=r;e++,c++){b[e]=array[c];}c=p;for(e=d=0;d&lt;a.length&amp;&amp;e&lt;b.length;){if(a[d]&lt;b[e]){array[c]=a[d];d++;} else {array[c]=b[e]; e++;}c++; }for(;d&lt;a.length;){array[c]=a[d];d++;c++;}for(;e&lt;b.length;){array[c]=b[e];e++;c++;}\n};\n\n\n// Takes in an array and recursively merge sorts it\nvar mergeSort = function(array, p, r) {\n    if(r &gt; 1) {\n        var q = Math.floor((p + r) / 2);\n        mergeSort(array,p,q);\n        mergeSort(array,q+1,r);\n        merge(array, p, q, r);\n    }\n\n};\n\nvar array = [14, 7, 3, 12, 9, 11, 6, 2];\nconsole.log(''+array);\nmergeSort(array, 0, array.length-1);\nconsole.log(\"Array after sorting: \" + array);\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Takes in an array that has two sorted subarrays,\r\n    //  from [p..q] and [q+1..r], and merges the array\r\n    var merge = function(array, p, q, r) {\r\n        // This code has been purposefully obfuscated,\r\n        //  as you'll write it yourself in next challenge.\r\n        var a=[],b=[],c=p,d,e;for(d=0;c&lt;=q;d++,c++){a[d]=array[c];}for(e=0;c&lt;=r;e++,c++){b[e]=array[c];}c=p;for(e=d=0;d&lt;a.length&amp;&amp;e&lt;b.length;){if(a[d]&lt;b[e]){array[c]=a[d];d++;} else {array[c]=b[e]; e++;}c++; }for(;d&lt;a.length;){array[c]=a[d];d++;c++;}for(;e&lt;b.length;){array[c]=b[e];e++;c++;}\r\n    };\r\n    \r\n    \r\n    // Takes in an array and recursively merge sorts it\r\n    var mergeSort = function(array, p, r) {\r\n        if(r &gt; 1) {\r\n            var q = Math.floor((p + r) / 2);\r\n            mergeSort(array,p,q);\r\n            mergeSort(array,q+1,r);\r\n            merge(array, p, q, r);\r\n        }\r\n        \r\n    };\r\n    \r\n    var array = [14, 7, 3, 12, 9, 11, 6, 2];\r\n    console.log(''+array);\r\n    mergeSort(array, 0, array.length-1);\r\n    console.log(\"Array after sorting: \" + array);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
      closed_date = 1519313716,
      closed_reason = "Needs more focus",
      creation_date = 1519285154,
      is_answered = true,
      last_activity_date = 1519286082,
      last_edit_date = 1519285412,
      link = "https://stackoverflow.com/questions/48921933/merge-sort-javascript-implementation",
      owner = {
        accept_rate = 64,
        account_id = 2180706,
        display_name = "alexandre1985",
        link = "https://stackoverflow.com/users/1930275/alexandre1985",
        profile_image = "https://i.stack.imgur.com/uQrkB.jpg?s=256&g=1",
        reputation = 1014,
        user_id = 1930275,
        user_type = "registered"
      },
      question_id = 48921933,
      score = -4,
      tags = { "javascript", "algorithm", "mergesort" },
      title = "Merge Sort JavaScript Implementation",
      view_count = 492
    }, {
      accepted_answer_id = 50745491,
      answer_count = 1,
      body = '<p>I have been experimenting with the number of iterations of various sorting algorithms. I have been trying to figure out which ones take most iterations to execute. I define an iteration as either a iteration through a loop or the execution of a function (In order to take recursion into account). Quick Sort and Merge sort seem to be a lot faster than Bubble Sort as far as performance. Quick sort seems to be faster in cases where there are fewer items in the array. This could be because my quick Sort algorithm is not very efficient. </p>\n\n<p>My question is Quick Sort take fewer iterations than Merge Sort and if so why. I have also listed my code below in case my algorithms are incorrect. Thank you.     </p>\n\n<pre><code>function quickSort(arr){\n        iter++;\n        let length = arr.length;\n        let pivot_index =  [length-1]; //Math.floor(Math.random() * [length -1]);\n    let index = 0;\n    while(pivot_index&gt;index){\n        iter++;\n        if(arr[pivot_index]&lt;arr[index]){\n            let temp = arr[index];\n            arr[index] = arr[pivot_index-1];\n            arr[pivot_index-1] = arr[pivot_index] ;\n            arr[pivot_index] = temp;\n            --pivot_index\n        }\n        else\n            ++index;\n    }\n\n    if(length&gt;3)\n        return  quickSort(arr.slice(0, pivot_index)).concat([arr[pivot_index]],quickSort(arr.slice(pivot_index+1)));\n    else\n        return arr;\n}\n\n\n\nfunction selectionSort(arr){\n    let numIterations = 0;\n    for(let i = 0; i&lt;arr.length-1; i++){\n        numIterations+=1;\n        for(let j = i +1; j&lt;arr.length; j++){\n            if( arr[i] &gt; arr[j]){\n                let temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n            numIterations+=1;\n        }\n    }\n    return {"num_iterations": numIterations, "arr":arr}\n\n}\n\n\nfunction bubbleSort(arr){\n\n    let numIterations = 0;\n    let count = 0;\n    do{\n        var swapped = false;\n        numIterations+=1;\n        count+=1;\n        for(let i = 0;i&lt;arr.length-count;i++){\n            numIterations+=1;\n            if(arr[i]&gt;arr[i+1]){\n                let temp = arr[i];\n                arr[i] = arr[i+1];\n                arr[i+1] = temp;\n                swapped = true;\n            }\n        }\n\n    } while(swapped == true)\n    return {"num_iterations": numIterations, "arr":arr}\n}\n\nfunction mergeSort(arr){\n    iter+=1;\n\n    if(arr.length&gt;1){\n        let divsor = arr.length + 1;\n        let arr_left_half = arr.slice(0,parseInt(divsor / 2));\n        let arr_right_half = arr.slice(parseInt( divsor / 2));\n        arr = null;\n        var tup_arr = [mergeSort(arr_left_half), mergeSort(arr_right_half)];\n\n    }else\n        return arr;\n\n    let l = []\n\n    while(tup_arr[0].length &gt; 0 || tup_arr[1].length &gt; 0){\n        iter+=1;\n        let arr1_length = tup_arr[0].length;\n        let arr2_length = tup_arr[1].length;\n        if(arr1_length &gt; 0 &amp;&amp; arr2_length &gt; 0){\n            if(tup_arr[0][0] &gt; tup_arr[1][0])\n                l.push(tup_arr[1].shift());\n            else\n                l.push(tup_arr[0].shift());\n        }\n        else if( arr1_length &gt; 0)\n            l.push(tup_arr[0].shift());\n        else if(arr2_length &gt; 0)\n            l.push(tup_arr[1].shift())\n\n    }\n    tup_arr = null;\n    return l;\n\n}\n\nlet iter = 0;\nlet arr = []\nfor(let i =0;i&lt;10000;i++){\n   let num =  Math.floor(Math.random() * 10000);\n   arr.push(num);\n}\n\nlet bubble_sort = bubbleSort(arr.slice());\nlet selection_sort = selectionSort(arr.slice());\nlet merge_sort = mergeSort(arr.slice());\nconsole.log("Merge Sort Iterations:"+iter);\niter = 0;\nlet quick_sort = quickSort(arr.slice());\nconsole.log("Quick Sort Iterations:"+iter);\nconsole.log("Selection Sort Iterations:"+selection_sort.num_iterations);\nconsole.log("Bubble Sort Iterations:"+bubble_sort.num_iterations);\n</code></pre>\n',
      content_license = "CC BY-SA 4.0",
      creation_date = 1528384110,
      is_answered = true,
      last_activity_date = 1528387008,
      last_edit_date = 1528384352,
      link = "https://stackoverflow.com/questions/50744624/are-my-sort-algorithms-correct-why-does-merge-sort-take-fewer-iterations-than-q",
      owner = {
        account_id = 8127622,
        display_name = "MicahB",
        link = "https://stackoverflow.com/users/6121991/micahb",
        profile_image = "https://i.stack.imgur.com/Chsmd.jpg?s=256&g=1",
        reputation = 134,
        user_id = 6121991,
        user_type = "registered"
      },
      question_id = 50744624,
      score = -1,
      tags = { "javascript", "algorithm", "sorting" },
      title = "Are my sort algorithms correct? Why does merge sort take fewer iterations than quick sort?",
      view_count = 98
    }, {
      answer_count = 0,
      body = "<p>I'm trying to perform a merge sort (I'm open to suggestion of a different sort method) on a user defined list of items. They could be pet names, football teams, or anything else. I want to use merge sort to minimize the number of comparisons the user has to see. In the end, the user gets a ranked list of the items. </p>\n\n<p>The problem I'm having is getting the Javascript to wait until the user hits one of the buttons I'm displaying on the page. </p>\n\n<p>For instance, from the example here: <a href=\"http://www.stoimen.com/blog/2010/07/02/friday-algorithms-javascript-merge-sort/\" rel=\"nofollow noreferrer\">http://www.stoimen.com/blog/2010/07/02/friday-algorithms-javascript-merge-sort/</a></p>\n\n<p>on the merge step:</p>\n\n<pre><code>if (left[0] &lt;= right[0]) {\n    result.push(left.shift());\n} else {\n    result.push(right.shift());\n}\n</code></pre>\n\n<p>I would like to use</p>\n\n<pre><code>if(/*user clicked left button*/)\n    result.push(left.shift());\n} else {\n    result.push(right.shift());\n}\n</code></pre>\n\n<p>As I understand, the code would have to be broken up, possibly using an iterative version of the merge sort. However, I'm having trouble visualizing how to make that happen. </p>\n",
      content_license = "CC BY-SA 3.0",
      creation_date = 1479347022,
      is_answered = false,
      last_activity_date = 1479347022,
      link = "https://stackoverflow.com/questions/40645384/breaking-up-merge-sort-to-wait-for-user-input-in-javascript",
      owner = {
        account_id = 6220051,
        display_name = "Tim",
        link = "https://stackoverflow.com/users/5592340/tim",
        profile_image = "https://www.gravatar.com/avatar/27372038864c1ee1170b94698bf5e6f0?s=256&d=identicon&r=PG&f=1",
        reputation = 1,
        user_id = 5592340,
        user_type = "registered"
      },
      question_id = 40645384,
      score = 0,
      tags = { "javascript" },
      title = "Breaking up merge sort to wait for user input in javascript",
      view_count = 58
    }, {
      accepted_answer_id = 68558087,
      answer_count = 1,
      body = "<p>I've written a merge sort visualisation in p5.js which shows the steps of merge sort. This works fine as a sequential visualisation, but I'd quite like to show this as a true representation, where you can see each part of the array being sorted at the same time (with multiple sections being visualised sorting at the same time, to truly reflect the recursion). The code itself is relatively simple:</p>\n<pre><code>    // Split the array recursively\n    let mid = Math.floor((right + left) / 2);\n\n    if (right - left &lt; 1) {\n        return;\n    }\n    \n    // My attempt to visualise this properly\n    await Promise.all([mergeSortSlice(array, left, mid), mergeSortSlice(array, mid + 1, right)]);\n    \n    // THIS WORKS, but only for sequential sorting\n    // await mergeSortSlice(array, left, mid);\n    // await mergeSortSlice(array, mid + 1, right)\n\n   // Putting sleep(200) here also works, but doesn't show the steps of the sort as they are happening, just the result of each stage of the sort.\n\n    leftCounter = 0;\n    rightCounter = 0;\n    l = left;\n    r = mid + 1;\n    valuesStartIndex = l;\n    let leftArray = array.slice(left, r);\n    let rightArray = array.slice(r, right + 1);\n\n    while (rightCounter &lt; rightArray.length &amp;&amp; leftCounter &lt; leftArray.length) {\n        if (leftArray[leftCounter] &lt; rightArray[rightCounter]) {\n            array.splice(l + rightCounter, 1);\n            array.splice(valuesStartIndex, 0, leftArray[leftCounter]);\n            l++;\n            leftCounter++;\n            valuesStartIndex++;\n            await sleep(200);\n\n        } else {\n            array.splice(r, 1);\n            array.splice(valuesStartIndex, 0, rightArray[rightCounter]);\n            r++;\n            rightCounter++;\n            valuesStartIndex++;\n            await sleep(200);\n        }\n    }\n</code></pre>\n<p>The problem with using <code>Promise.all</code> is that the split parts of the array are getting mixed up, I believe due to the recursion? This is resulting in the array not getting sorted properly.</p>\n<p>My timeout function:</p>\n<pre><code>async function sleep(ms) {\n    return new Promise(resolve =&gt; setTimeout(resolve, ms));\n} \n</code></pre>\n<p>The setup function and draw loop:</p>\n<pre><code>let values = [50, 10, 80, 56, 30, 25, 15]\n\nfunction setup() {\n    createCanvas(600, 190);\n    frameRate(60);\n    mergeSort(values)\n}\n\nfunction draw() {\n    rectWidth = 10;\n    background(23);\n    stroke(0);\n    fill(255);\n\n    for (let i = 0; i &lt; values.length; i++) {\n        rect(i * rectWidth, height - values[i], rectWidth, values[i]);\n    }\n} \n</code></pre>\n<p>The combination of async functions and recursion makes it difficult for me to come up with a solution for this. Any help/advice would be much appreciated.</p>\n",
      content_license = "CC BY-SA 4.0",
      creation_date = 1624185503,
      is_answered = true,
      last_activity_date = 1627465744,
      link = "https://stackoverflow.com/questions/68054956/merge-sort-visualisation-using-recursion-and-promises",
      owner = {
        account_id = 12257941,
        display_name = "matt93",
        link = "https://stackoverflow.com/users/8946500/matt93",
        profile_image = "https://www.gravatar.com/avatar/f48cbeecbee2d458c0766e85e8503f90?s=256&d=identicon&r=PG&f=1",
        reputation = 73,
        user_id = 8946500,
        user_type = "registered"
      },
      question_id = 68054956,
      score = 1,
      tags = { "javascript", "sorting", "recursion", "promise", "p5.js" },
      title = "Merge sort visualisation using recursion and Promises",
      view_count = 78
    }, {
      answer_count = 1,
      body = "<p>I was told in an interview to write a program for implementing merge sort on the concept of divide and conquer.</p>\n\n<p>I wrote the below program,</p>\n\n<pre><code>var myGlobalArray = undefined;\n\nmyGlobalArray = [8,4,17,2,1,32];\nexample01(myGlobalArray);\n\nmyGlobalArray = [48,14,17,2,11,132];\nexample01(myGlobalArray);\n\nmyGlobalArray = [45,14,5,2,1,12];\nexample01(myGlobalArray);\n\nmyGlobalArray = [45,-14,-5,2,1,-12];\nexample01(myGlobalArray);\n\nmyGlobalArray = [38,27,43,3,9,82,10];\nexample01(myGlobalArray);\n\n\nfunction example01(myArray){\n   var mainArray = [];\n\n   createSubArray(myArray,0);\n\n   mainArray = mergeArrays(mainArray);\n   console.log(mainArray[0]);\n\n   // creates an array which contains n arrays for n numbers present in myarray\n   // i.e. if array = [ 34, 1, 27, 3 ] that the below method will return\n   // [ [34], [1], [27], [3] ]\n   function createSubArray(subArray,index){\n        var localArray = [];\n\n        if(subArray[index] !== undefined){\n            localArray.push(subArray[index]);\n            mainArray.push(localArray);\n            createSubArray(subArray,++index);// performs division recursively   \n        }       \n   }//createSubArray\n\n\n   // merge the arrays present i.e. \n   // if gblArray = [ [2,5], [1,7] ] \n   // then the below method will return\n   // an merged array [ [1, 2, 5, 7] ]\n   function mergeArrays(gblArray){\n        var mergedArrays = [],\n            main_array = gblArray,\n            arr = [], \n            counter = 0, \n            nextCounter = 0;\n\n        do{\n\n            while(counter &lt; main_array.length){\n                nextCounter = counter + 1;\n\n                if(main_array[nextCounter] !== undefined){\n                    arr = mergeAndSort(main_array[counter],main_array[nextCounter]);    \n                    mergedArrays.push(arr);\n                }else{\n                    mergedArrays.push(main_array[counter]);\n                }\n                counter = nextCounter + 1;\n            }\n\n            main_array = mergedArrays;\n            mergedArrays = [];  \n            counter = 0;\n            nextCounter = 0;\n\n        }while(main_array.length &gt; 1);\n\n        return main_array;\n   }//mergeArrays\n\n\n   // merges two array and sorts i.e.\n   // if array1 = [23,1] and array2 = [4,12] than\n   // the below method returns [1,4,12,23]\n   function mergeAndSort(array1,array2){\n        var array2Counter = 0, \n            array1Counter = 0, \n            mergedArray = [];\n\n        while(array2Counter &lt; array2.length &amp;&amp; array1Counter &lt; array1.length){\n\n            if(array2[array2Counter] &lt; array1[array1Counter]){\n                mergedArray.push(array2[array2Counter]);\n                array2Counter++;\n            }else{\n                mergedArray.push(array1[array1Counter]);\n                array1Counter++;\n            }\n        }\n\n        while(array1Counter &lt; array1.length){\n            mergedArray.push(array1[array1Counter]);\n            array1Counter++;\n        }\n\n        while(array2Counter &lt; array2.length){\n            mergedArray.push(array2[array2Counter]);\n            array2Counter++;\n        }\n\n        return mergedArray;\n   } //mergeAndSort\n\n\n\n}//example01\n</code></pre>\n\n<p>If I run the above code, \nthe output is</p>\n\n<pre><code>[ 1, 2, 4, 8, 17, 32 ]\n[ 2, 11, 14, 17, 48, 132 ]\n[ 1, 2, 5, 12, 14, 45 ]\n[ -14, -12, -5, 1, 2, 45 ]\n[ 3, 9, 10, 27, 38, 43, 82 ]\n</code></pre>\n\n<p>But by looking at my above implemented merge-sort program, the inteviewer said that if doesn't follows divide and conquer concept.</p>\n\n<p>I tried to convince him that method \"mergeArrays\" and \"mergeAndSort\" \ndo the divide and conquer. But he didn't agreed.</p>\n\n<p>Where am I going wrong ?</p>\n",
      content_license = "CC BY-SA 3.0",
      creation_date = 1489943282,
      is_answered = false,
      last_activity_date = 1489946371,
      last_edit_date = 1489945802,
      link = "https://stackoverflow.com/questions/42889501/does-my-merge-sort-implementation-has-divide-and-conquer",
      owner = {
        accept_rate = 86,
        account_id = 460116,
        display_name = "Rahul Shivsharan",
        link = "https://stackoverflow.com/users/861015/rahul-shivsharan",
        profile_image = "https://i.stack.imgur.com/wutSG.jpg?s=256&g=1",
        reputation = 2431,
        user_id = 861015,
        user_type = "registered"
      },
      question_id = 42889501,
      score = 0,
      tags = { "javascript", "arrays", "sorting", "logic", "mergesort" },
      title = "Does my merge sort implementation has divide and conquer?",
      view_count = 193
    }, {
      answer_count = 3,
      body = "<p>I am trying to write merge sort algorithm myself in javascript but I see that it is not working. I am taking a sample array <code>[9,1,5,3]</code> and trying to sort it. But it is giving me incorrect result but console shows me <code>[3, undefined, undefined, 5]</code>. I am unable to figure out myself where it is going wrong. Can anyone help me in this</p>\n<pre><code>function merge(arr, start, mid, end) {\n    const result = [];\n\n    let first = start;\n    let index = start;\n    let midNext = mid + 1;\n\n    while (first &lt;= mid &amp;&amp; midNext &lt;= end) {\n        if (arr[first] &lt;= arr[midNext]) {\n            result[index++] = arr[first++]            \n        } else {\n            result[index++] = arr[midNext++]            \n            console.log(result)\n        }\n\n        while (first &lt;= mid) {\n            result[index++] = arr[first++]            \n            console.log(result)\n        }\n\n        while (midNext &lt;= end) {\n            result[index++] = arr[midNext++]            \n            console.log(result)\n        }\n    }\n    for (let i = 0; i &lt;= end; i++) {\n        arr[i] = result[i];\n    }\n    console.log(arr)\n}\n\nfunction mergeSort(arr, start, end) {\n    if (start == end) {\n        return start;\n    }\n\n    let midIndex = Math.floor(start + (end - start) / 2);\n    mergeSort(arr, start, midIndex);\n    mergeSort(arr, midIndex + 1, end);\n    merge(arr, start, midIndex, end)\n}\n</code></pre>\n",
      content_license = "CC BY-SA 4.0",
      creation_date = 1644839713,
      is_answered = false,
      last_activity_date = 1645296781,
      last_edit_date = 1645296571,
      link = "https://stackoverflow.com/questions/71111464/unable-to-implement-merge-sort-algorithm-in-javascript",
      owner = {
        account_id = 20628016,
        display_name = "Kumar_Maddy ",
        link = "https://stackoverflow.com/users/15143409/kumar-maddy",
        profile_image = "https://lh5.googleusercontent.com/-PdgmpXx_Cn8/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuckTRWo1QwKbDfH-jN5yHDUuOKzoXg/s96-c/photo.jpg?sz=256",
        reputation = 33,
        user_id = 15143409,
        user_type = "registered"
      },
      question_id = 71111464,
      score = 1,
      tags = { "javascript", "mergesort" },
      title = "Unable to implement merge sort algorithm in Javascript",
      view_count = 64
    }, {
      accepted_answer_id = 62907416,
      answer_count = 1,
      body = "<p>I am trying to build a sorting visualiser and when I code the merge sort algorithm the returning array is always of length 1 and my algorithm seems perfectly fine and I don't know what's making it to return single length array element and I did try to debug using console statements and everything seems fine until it goes into recursion.</p>\n<p>my main <strong>app.js</strong> code is here:</p>\n<pre><code>testSortingAlgo() {\n       //here we are creating 100 arrays for checking the sorting algorithms\n    for (let i = 0; i &lt; 100; i++) {   \n        const array = [];\n        //creating different lengths of the array\n        const length = randomIntFromInterval(1, 1000);\n        console.log(length);\n        for (let j = 0; j &lt; length; j++) {\n            //push all collection of negative and positive numbers\n            array.push(randomIntFromInterval(-1000, 1000));\n        }\n        console.log(array.length);\n        console.log(array.slice().length);\n        //for sorting in javascript inbuilt function .we are passing (a, b) =&gt; (a - b) because inbult function \n        // checks from starting character so in case of (200,5) 5 is greater as first char of 5 is greater than\n        // first char of 200 that is 2\n        const javascriptSortedArray = array.slice().sort((a, b) =&gt; (a - b))\n        const SortedArray = sortingAlgorithms.mergeSort(array.slice());\n        console.log(arraysAreEqual(javascriptSortedArray, SortedArray));\n    }\n}\n</code></pre>\n<p>in this function I am checking for validation of my sorting algorithm. when I pass the <code>array.slice()</code> to the merge sort. The array is getting manipulated in the following code</p>\n<pre><code>export const mergeSort = array =&gt; {\n    // for (let i = 0; i &lt; array.length; i++) {\n    //     console.log(array[i]);\n    if (array.length &lt;= 1) return array;\n    \n    const middleIdx = Math.floor(array.length / 2);\n    const firstHalf = mergeSort(array.slice(0, middleIdx));\n    const secondHalf = mergeSort(array.slice(middleIdx, array.length));\n    const sortedArray = [];\n    let i = 0, j = 0;\n    while (i &lt; firstHalf.length &amp;&amp; j &lt; secondHalf.length) {\n        if (firstHalf[i] &lt; secondHalf[j]) {\n            sortedArray.push(firstHalf[i++]);\n        } else {\n            sortedArray.push(secondHalf[j++]);\n        }\n    }\n    while (i &lt; firstHalf.length) array.push(firstHalf[i++]);\n    while (j &lt; secondHalf.length) array.push(secondHalf[j++]);\n    return sortedArray;   \n}\n</code></pre>\n<p>and it's returning a single array element.</p>\n",
      content_license = "CC BY-SA 4.0",
      creation_date = 1594782181,
      is_answered = true,
      last_activity_date = 1594803405,
      last_edit_date = 1594803405,
      link = "https://stackoverflow.com/questions/62906946/unable-to-figure-out-the-bug-in-merge-sort",
      owner = {
        account_id = 16484056,
        display_name = "Giriteja Bille",
        link = "https://stackoverflow.com/users/11909972/giriteja-bille",
        profile_image = "https://graph.facebook.com/812832849112937/picture?type=large",
        reputation = 160,
        user_id = 11909972,
        user_type = "registered"
      },
      question_id = 62906946,
      score = 2,
      tags = { "javascript", "reactjs", "algorithm", "sorting", "mergesort" },
      title = "Unable to figure out the bug in merge sort",
      view_count = 72
    }, {
      accepted_answer_id = 32654028,
      answer_count = 1,
      body = "<p>I was trying to improve the time of a typical merge-sort function using pop().  When I run it in Chrome, it crashes with memory errors. Obviously this means that it's looping without completing, but I can't tell why.</p>\n\n<p>Here's the code:</p>\n\n<pre><code>function mergeSorted(a, b){\n  var c = [];\n  while(a.length &amp;&amp; b.length){\n    var a1 = a.pop();\n    var b1 = b.pop();\n    var aIndex = parseInt((a.length) - 1);\n    var bIndex = parseInt((b.length) - 1);\n    while(b[bIndex] &gt;= a[aIndex]) c.push(b1);\n    while(a[aIndex] &gt;= b[bIndex]) c.push(a1);\n  }\n  return c;\n}\n\nvar a = [1, 3, 5, 7, 7, 8, 8, 9, 9];\nvar b = [2, 4, 5, 6, 7, 8, 9];\nmergeSorted(a, b);\n</code></pre>\n",
      content_license = "CC BY-SA 4.0",
      creation_date = 1442584812,
      is_answered = true,
      last_activity_date = 1566816801,
      last_edit_date = 1566816801,
      link = "https://stackoverflow.com/questions/32653946/js-merge-sort-function-runs-out-of-memory",
      owner = {
        account_id = 5165400,
        display_name = "Lisa Ziegler",
        link = "https://stackoverflow.com/users/4135593/lisa-ziegler",
        profile_image = "https://i.stack.imgur.com/bxAdC.jpg?s=256&g=1",
        reputation = 43,
        user_id = 4135593,
        user_type = "registered"
      },
      question_id = 32653946,
      score = -1,
      tags = { "javascript", "arrays", "sorting", "mergesort" },
      title = "JS merge sort function runs out of memory",
      view_count = 137
    }, {
      accepted_answer_id = 63548857,
      answer_count = 2,
      body = "<p>I am trying to implement merge sort iteratively but in javascript. I tried searching on the internet as well but they only have in C, Python, and java. The array my function is giving is not sorted. I tried different things but can't figure out the error. Can someone point out please what I am doing wrong?</p>\n<pre><code>function mergeSortIterative(arr){\n    let sorted=[...arr];//copying the array so that original remains unchanged.\n    let n=sorted.length;\n    let currSize;\n    let leftStart;\n    for(currSize=1;currSize&lt;=n-1;currSize=2*currSize){\n        for(leftStart=0;leftStart&lt;n-1;leftStart+=2*currSize){\n            let mid=Math.min(leftStart+currSize-1,n-1);\n            let rightEnd=Math.min(leftStart+2*currSize-1,n-1);\n            // let left=sorted.slice(leftStart,mid);\n            // let right=sorted.slice(mid,rightEnd);\n            // sorted=mergeIterative(sorted,left,right);\n            mergeIterative(sorted,leftStart,mid,rightEnd);\n        }\n    }\n    return sorted;\n}\n\nfunction mergeIterative(sorted,leftStart,mid,rightEnd){\n    let left=sorted.slice(leftStart,mid);\n    let right=sorted.slice(mid,rightEnd);\n    let leftIndex=0,rightIndex=0,k=leftStart;\n    while(leftIndex&lt;left.length &amp;&amp; rightIndex&lt;right.length){\n        //picking the lesser one \n        if(left[leftIndex]&lt;=right[rightIndex]){\n            sorted[k]=left[leftIndex];\n            leftIndex++;\n            k++;\n        }\n        else{\n            sorted[k]=right[rightIndex];\n            rightIndex++;\n            k++;\n        }\n    }\n    while(leftIndex&lt;left.length &amp;&amp; k&lt;sorted.length){\n        sorted[k]=left[leftIndex];\n        leftIndex++;\n        k++;\n    }\n    while(rightIndex&lt;right.length &amp;&amp; k&lt;sorted.length){\n        sorted[k]=right[rightIndex];\n        rightIndex++;\n        k++;\n    }\n}\n</code></pre>\n",
      content_license = "CC BY-SA 4.0",
      creation_date = 1598193464,
      is_answered = true,
      last_activity_date = 1598196931,
      link = "https://stackoverflow.com/questions/63548204/iterative-approach-of-merge-sort-in-javascript",
      owner = {
        account_id = 16404046,
        display_name = "Pranav Sinha",
        link = "https://stackoverflow.com/users/11849119/pranav-sinha",
        profile_image = "https://lh3.googleusercontent.com/-RnXR-1yx-hY/AAAAAAAAAAI/AAAAAAAAAAc/KRqs4cltNLk/photo.jpg?sz=256",
        reputation = 17,
        user_id = 11849119,
        user_type = "registered"
      },
      question_id = 63548204,
      score = -1,
      tags = { "javascript", "arrays", "sorting", "mergesort" },
      title = "Iterative approach of Merge Sort in Javascript",
      view_count = 186
    } },
  quota_max = 10000,
  quota_remaining = 9945
}

local titles = {
	[=[ Correct merge sort ]=],
	[=[ Javascript Shell Sort implementation is quicker then Merge Sort ]=],
	[=[ Merge Sort Visualizer ]=],
	[=[ Merge sort implementation JavaScript ]=],
	[=[ Optimized merge sort faster than quicksort ]=],
	[=[ Merge Sort Visualisation ]=],
	[=[ Target specific attributes with merge sort ]=],
	[=[ javascript merge sort and recursion ]=],
	[=[ Implementing merge sort iteratively ]=],
	[=[ Javascript - Merge Sort Visualizer using CSS Style to Sort, having issues ]=],
	[=[ Javascript merge sort visualisation ]=],
	[=[ javascript merge/sort fatal error ]=],
	[=[ javascript syntax - rosetta code merge sort ]=],
	[=[ Simple implementation of merge sort in javascript ]=],
	[=[ Parallel sort using web workers is slower than serial sort (merge sort) ]=],
	[=[ Implementing merge sort in Javascript ]=],
	[=[ Implementing merge sort algorithm in JavaScript ]=],
	[=[ Maximum call stack size exceeded in merge sort ]=],
	[=[ Merge Sort Implementation Not Working in Javascript ]=],
	[=[ merge sort in javascript returns repeated elements ]=],
	[=[ Merge Sort: merge function array index zero returning multiple indexes ]=],
	[=[ Merge Sort JavaScript Implementation ]=],
	[=[ Are my sort algorithms correct? Why does merge sort take fewer iterations than quick sort? ]=],
	[=[ Breaking up merge sort to wait for user input in javascript ]=],
	[=[ Merge sort visualisation using recursion and Promises ]=],
	[=[ Does my merge sort implementation has divide and conquer? ]=],
	[=[ Unable to implement merge sort algorithm in Javascript ]=],
	[=[ Unable to figure out the bug in merge sort ]=],
	[=[ JS merge sort function runs out of memory ]=],
	[=[ Iterative approach of Merge Sort in Javascript ]=],
}
